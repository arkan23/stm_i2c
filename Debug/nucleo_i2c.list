
nucleo_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006068  08006068  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006070  08006070  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006070  08006070  00016070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006074  08006074  00016074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  080060e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080060e8  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105fc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b5  00000000  00000000  0003069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176f5  00000000  00000000  00033ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e186  00000000  00000000  0004b39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089abc  00000000  00000000  00059523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000e3034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f90 	.word	0x08005f90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005f90 	.word	0x08005f90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <RTC_convertFromDec>:
#include "RTC.h"

uint8_t RTC_convertFromDec(uint8_t data) {
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t result = ((data>>4) * 10+(0x0F&data));
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b2da      	uxtb	r2, r3
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 030f 	and.w	r3, r3, #15
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4413      	add	r3, r2
 800059c:	73fb      	strb	r3, [r7, #15]
	return result;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <I2C_WriteBuffer>:


extern uint8_t arrayBuffer[8];
char str[100];

void I2C_WriteBuffer(I2C_HandleTypeDef hi, uint8_t dev_addr, uint8_t size_buff) {
 80005ac:	b084      	sub	sp, #16
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af02      	add	r7, sp, #8
 80005b4:	f107 0c08 	add.w	ip, r7, #8
 80005b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t) dev_addr, (uint8_t*) &arrayBuffer, (uint16_t) size_buff, (uint32_t) 1000) != HAL_OK){
 80005bc:	e00a      	b.n	80005d4 <I2C_WriteBuffer+0x28>
		if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF) {
 80005be:	f107 0008 	add.w	r0, r7, #8
 80005c2:	f001 ff77 	bl	80024b4 <HAL_I2C_GetError>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d003      	beq.n	80005d4 <I2C_WriteBuffer+0x28>
			sprintf(str, "Buffer Error");
 80005cc:	490d      	ldr	r1, [pc, #52]	; (8000604 <I2C_WriteBuffer+0x58>)
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <I2C_WriteBuffer+0x5c>)
 80005d0:	f004 fbdc 	bl	8004d8c <siprintf>
	while(HAL_I2C_Master_Transmit(&hi, (uint16_t) dev_addr, (uint8_t*) &arrayBuffer, (uint16_t) size_buff, (uint32_t) 1000) != HAL_OK){
 80005d4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80005d8:	b299      	uxth	r1, r3
 80005da:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80005de:	b29b      	uxth	r3, r3
 80005e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <I2C_WriteBuffer+0x60>)
 80005e8:	f107 0008 	add.w	r0, r7, #8
 80005ec:	f001 f9b0 	bl	8001950 <HAL_I2C_Master_Transmit>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1e3      	bne.n	80005be <I2C_WriteBuffer+0x12>
		}
	}

}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000600:	b004      	add	sp, #16
 8000602:	4770      	bx	lr
 8000604:	08005fa8 	.word	0x08005fa8
 8000608:	20000098 	.word	0x20000098
 800060c:	20000150 	.word	0x20000150

08000610 <I2C_ReadBuffer>:

void I2C_ReadBuffer(I2C_HandleTypeDef hi, uint8_t dev_addr, uint8_t size_buff) {
 8000610:	b084      	sub	sp, #16
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af02      	add	r7, sp, #8
 8000618:	f107 0c08 	add.w	ip, r7, #8
 800061c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	while(HAL_I2C_Master_Receive(&hi, (uint16_t) dev_addr, (uint8_t*) &arrayBuffer, (uint16_t) size_buff, (uint32_t) 1000) != HAL_OK){
 8000620:	e00a      	b.n	8000638 <I2C_ReadBuffer+0x28>
			if (HAL_I2C_GetError(&hi) != HAL_I2C_ERROR_AF) {
 8000622:	f107 0008 	add.w	r0, r7, #8
 8000626:	f001 ff45 	bl	80024b4 <HAL_I2C_GetError>
 800062a:	4603      	mov	r3, r0
 800062c:	2b04      	cmp	r3, #4
 800062e:	d003      	beq.n	8000638 <I2C_ReadBuffer+0x28>
				sprintf(str, "Buffer Error");
 8000630:	490d      	ldr	r1, [pc, #52]	; (8000668 <I2C_ReadBuffer+0x58>)
 8000632:	480e      	ldr	r0, [pc, #56]	; (800066c <I2C_ReadBuffer+0x5c>)
 8000634:	f004 fbaa 	bl	8004d8c <siprintf>
	while(HAL_I2C_Master_Receive(&hi, (uint16_t) dev_addr, (uint8_t*) &arrayBuffer, (uint16_t) size_buff, (uint32_t) 1000) != HAL_OK){
 8000638:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800063c:	b299      	uxth	r1, r3
 800063e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000642:	b29b      	uxth	r3, r3
 8000644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <I2C_ReadBuffer+0x60>)
 800064c:	f107 0008 	add.w	r0, r7, #8
 8000650:	f001 fa7c 	bl	8001b4c <HAL_I2C_Master_Receive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1e3      	bne.n	8000622 <I2C_ReadBuffer+0x12>
			}
		}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr
 8000668:	08005fa8 	.word	0x08005fa8
 800066c:	20000098 	.word	0x20000098
 8000670:	20000150 	.word	0x20000150

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b099      	sub	sp, #100	; 0x64
 8000678:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN 1 */
	uint32_t i=0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
	uint8_t sec=0, min=0, hour=0, day=0, date=0, month=0, year=0;
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]
 8000682:	2300      	movs	r3, #0
 8000684:	72bb      	strb	r3, [r7, #10]
 8000686:	2300      	movs	r3, #0
 8000688:	727b      	strb	r3, [r7, #9]
 800068a:	2300      	movs	r3, #0
 800068c:	723b      	strb	r3, [r7, #8]
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	2300      	movs	r3, #0
 8000694:	71bb      	strb	r3, [r7, #6]
 8000696:	2300      	movs	r3, #0
 8000698:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fc85 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f967 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fa27 	bl	8000af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a6:	f000 f9fb 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006aa:	f000 f9cb 	bl	8000a44 <MX_I2C1_Init>



    /* USER CODE BEGIN 3 */

	  arrayBuffer[0] = 0;
 80006ae:	4bac      	ldr	r3, [pc, #688]	; (8000960 <main+0x2ec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	  	  I2C_WriteBuffer(hi2c1, (uint16_t) 0xD0, 1);
 80006b4:	4cab      	ldr	r4, [pc, #684]	; (8000964 <main+0x2f0>)
 80006b6:	2301      	movs	r3, #1
 80006b8:	9312      	str	r3, [sp, #72]	; 0x48
 80006ba:	23d0      	movs	r3, #208	; 0xd0
 80006bc:	9311      	str	r3, [sp, #68]	; 0x44
 80006be:	4668      	mov	r0, sp
 80006c0:	f104 0310 	add.w	r3, r4, #16
 80006c4:	2244      	movs	r2, #68	; 0x44
 80006c6:	4619      	mov	r1, r3
 80006c8:	f004 fb32 	bl	8004d30 <memcpy>
 80006cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d0:	f7ff ff6c 	bl	80005ac <I2C_WriteBuffer>

	  	  while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80006d4:	bf00      	nop
 80006d6:	48a3      	ldr	r0, [pc, #652]	; (8000964 <main+0x2f0>)
 80006d8:	f001 fede 	bl	8002498 <HAL_I2C_GetState>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b20      	cmp	r3, #32
 80006e0:	d1f9      	bne.n	80006d6 <main+0x62>

	  	  }

	  	  I2C_ReadBuffer(hi2c1, (uint16_t) 0xD0, 7);
 80006e2:	4ca0      	ldr	r4, [pc, #640]	; (8000964 <main+0x2f0>)
 80006e4:	2307      	movs	r3, #7
 80006e6:	9312      	str	r3, [sp, #72]	; 0x48
 80006e8:	23d0      	movs	r3, #208	; 0xd0
 80006ea:	9311      	str	r3, [sp, #68]	; 0x44
 80006ec:	4668      	mov	r0, sp
 80006ee:	f104 0310 	add.w	r3, r4, #16
 80006f2:	2244      	movs	r2, #68	; 0x44
 80006f4:	4619      	mov	r1, r3
 80006f6:	f004 fb1b 	bl	8004d30 <memcpy>
 80006fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006fe:	f7ff ff87 	bl	8000610 <I2C_ReadBuffer>

	  	  date = arrayBuffer[4];
 8000702:	4b97      	ldr	r3, [pc, #604]	; (8000960 <main+0x2ec>)
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	71fb      	strb	r3, [r7, #7]
	  	  date = RTC_convertFromDec(date);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff34 	bl	8000578 <RTC_convertFromDec>
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
	  	printf(((date/10)%10)+0x30, (date%10)+0x30);
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	4a94      	ldr	r2, [pc, #592]	; (8000968 <main+0x2f4>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	08db      	lsrs	r3, r3, #3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b91      	ldr	r3, [pc, #580]	; (8000968 <main+0x2f4>)
 8000722:	fba3 1302 	umull	r1, r3, r3, r2
 8000726:	08d9      	lsrs	r1, r3, #3
 8000728:	460b      	mov	r3, r1
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	3330      	adds	r3, #48	; 0x30
 8000736:	4618      	mov	r0, r3
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <main+0x2f4>)
 800073c:	fba3 1302 	umull	r1, r3, r3, r2
 8000740:	08d9      	lsrs	r1, r3, #3
 8000742:	460b      	mov	r3, r1
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	440b      	add	r3, r1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3330      	adds	r3, #48	; 0x30
 8000750:	4619      	mov	r1, r3
 8000752:	f004 fb03 	bl	8004d5c <iprintf>

	  	  year = arrayBuffer[6];
 8000756:	4b82      	ldr	r3, [pc, #520]	; (8000960 <main+0x2ec>)
 8000758:	799b      	ldrb	r3, [r3, #6]
 800075a:	717b      	strb	r3, [r7, #5]
	  	  year = RTC_convertFromDec(year);
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0a 	bl	8000578 <RTC_convertFromDec>
 8000764:	4603      	mov	r3, r0
 8000766:	717b      	strb	r3, [r7, #5]
	  	printf(((year/10)%10)+0x30, (year%10)+0x30);
 8000768:	797b      	ldrb	r3, [r7, #5]
 800076a:	4a7f      	ldr	r2, [pc, #508]	; (8000968 <main+0x2f4>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b7c      	ldr	r3, [pc, #496]	; (8000968 <main+0x2f4>)
 8000776:	fba3 1302 	umull	r1, r3, r3, r2
 800077a:	08d9      	lsrs	r1, r3, #3
 800077c:	460b      	mov	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	3330      	adds	r3, #48	; 0x30
 800078a:	4618      	mov	r0, r3
 800078c:	797a      	ldrb	r2, [r7, #5]
 800078e:	4b76      	ldr	r3, [pc, #472]	; (8000968 <main+0x2f4>)
 8000790:	fba3 1302 	umull	r1, r3, r3, r2
 8000794:	08d9      	lsrs	r1, r3, #3
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	3330      	adds	r3, #48	; 0x30
 80007a4:	4619      	mov	r1, r3
 80007a6:	f004 fad9 	bl	8004d5c <iprintf>

	  	  month = arrayBuffer[5];
 80007aa:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <main+0x2ec>)
 80007ac:	795b      	ldrb	r3, [r3, #5]
 80007ae:	71bb      	strb	r3, [r7, #6]
	  	  month = RTC_convertFromDec(month);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fee0 	bl	8000578 <RTC_convertFromDec>
 80007b8:	4603      	mov	r3, r0
 80007ba:	71bb      	strb	r3, [r7, #6]
	  	printf(((month/10)%10)+0x30, (month%10)+0x30);
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	4a6a      	ldr	r2, [pc, #424]	; (8000968 <main+0x2f4>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b67      	ldr	r3, [pc, #412]	; (8000968 <main+0x2f4>)
 80007ca:	fba3 1302 	umull	r1, r3, r3, r2
 80007ce:	08d9      	lsrs	r1, r3, #3
 80007d0:	460b      	mov	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3330      	adds	r3, #48	; 0x30
 80007de:	4618      	mov	r0, r3
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	4b61      	ldr	r3, [pc, #388]	; (8000968 <main+0x2f4>)
 80007e4:	fba3 1302 	umull	r1, r3, r3, r2
 80007e8:	08d9      	lsrs	r1, r3, #3
 80007ea:	460b      	mov	r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3330      	adds	r3, #48	; 0x30
 80007f8:	4619      	mov	r1, r3
 80007fa:	f004 faaf 	bl	8004d5c <iprintf>

	  	  day = arrayBuffer[3];
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <main+0x2ec>)
 8000800:	78db      	ldrb	r3, [r3, #3]
 8000802:	723b      	strb	r3, [r7, #8]
	  	  day = RTC_convertFromDec(day);
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff feb6 	bl	8000578 <RTC_convertFromDec>
 800080c:	4603      	mov	r3, r0
 800080e:	723b      	strb	r3, [r7, #8]
	  	printf(((day/10)%10)+0x30, (day%10)+0x30);
 8000810:	7a3b      	ldrb	r3, [r7, #8]
 8000812:	4a55      	ldr	r2, [pc, #340]	; (8000968 <main+0x2f4>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b52      	ldr	r3, [pc, #328]	; (8000968 <main+0x2f4>)
 800081e:	fba3 1302 	umull	r1, r3, r3, r2
 8000822:	08d9      	lsrs	r1, r3, #3
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	3330      	adds	r3, #48	; 0x30
 8000832:	4618      	mov	r0, r3
 8000834:	7a3a      	ldrb	r2, [r7, #8]
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <main+0x2f4>)
 8000838:	fba3 1302 	umull	r1, r3, r3, r2
 800083c:	08d9      	lsrs	r1, r3, #3
 800083e:	460b      	mov	r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	3330      	adds	r3, #48	; 0x30
 800084c:	4619      	mov	r1, r3
 800084e:	f004 fa85 	bl	8004d5c <iprintf>

	  	  hour = arrayBuffer[2];
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <main+0x2ec>)
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	727b      	strb	r3, [r7, #9]
	  	  hour = RTC_convertFromDec(hour);
 8000858:	7a7b      	ldrb	r3, [r7, #9]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe8c 	bl	8000578 <RTC_convertFromDec>
 8000860:	4603      	mov	r3, r0
 8000862:	727b      	strb	r3, [r7, #9]
	  	printf(((hour/10)%10)+0x30, (hour%10)+0x30);
 8000864:	7a7b      	ldrb	r3, [r7, #9]
 8000866:	4a40      	ldr	r2, [pc, #256]	; (8000968 <main+0x2f4>)
 8000868:	fba2 2303 	umull	r2, r3, r2, r3
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <main+0x2f4>)
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	08d9      	lsrs	r1, r3, #3
 8000878:	460b      	mov	r3, r1
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	440b      	add	r3, r1
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3330      	adds	r3, #48	; 0x30
 8000886:	4618      	mov	r0, r3
 8000888:	7a7a      	ldrb	r2, [r7, #9]
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <main+0x2f4>)
 800088c:	fba3 1302 	umull	r1, r3, r3, r2
 8000890:	08d9      	lsrs	r1, r3, #3
 8000892:	460b      	mov	r3, r1
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3330      	adds	r3, #48	; 0x30
 80008a0:	4619      	mov	r1, r3
 80008a2:	f004 fa5b 	bl	8004d5c <iprintf>

	  	  min = arrayBuffer[1];
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <main+0x2ec>)
 80008a8:	785b      	ldrb	r3, [r3, #1]
 80008aa:	72bb      	strb	r3, [r7, #10]
	  	  min = RTC_convertFromDec(min);
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe62 	bl	8000578 <RTC_convertFromDec>
 80008b4:	4603      	mov	r3, r0
 80008b6:	72bb      	strb	r3, [r7, #10]
	  	printf(((min/10)%10)+0x30, (min%10)+0x30);
 80008b8:	7abb      	ldrb	r3, [r7, #10]
 80008ba:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <main+0x2f4>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <main+0x2f4>)
 80008c6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ca:	08d9      	lsrs	r1, r3, #3
 80008cc:	460b      	mov	r3, r1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	440b      	add	r3, r1
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	3330      	adds	r3, #48	; 0x30
 80008da:	4618      	mov	r0, r3
 80008dc:	7aba      	ldrb	r2, [r7, #10]
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <main+0x2f4>)
 80008e0:	fba3 1302 	umull	r1, r3, r3, r2
 80008e4:	08d9      	lsrs	r1, r3, #3
 80008e6:	460b      	mov	r3, r1
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	3330      	adds	r3, #48	; 0x30
 80008f4:	4619      	mov	r1, r3
 80008f6:	f004 fa31 	bl	8004d5c <iprintf>

	  	  sec = arrayBuffer[0];
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <main+0x2ec>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	72fb      	strb	r3, [r7, #11]
	  	  sec = RTC_convertFromDec(sec);
 8000900:	7afb      	ldrb	r3, [r7, #11]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe38 	bl	8000578 <RTC_convertFromDec>
 8000908:	4603      	mov	r3, r0
 800090a:	72fb      	strb	r3, [r7, #11]
	  	printf(((sec/10)%10)+0x30, (sec%10)+0x30);
 800090c:	7afb      	ldrb	r3, [r7, #11]
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <main+0x2f4>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <main+0x2f4>)
 800091a:	fba3 1302 	umull	r1, r3, r3, r2
 800091e:	08d9      	lsrs	r1, r3, #3
 8000920:	460b      	mov	r3, r1
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3330      	adds	r3, #48	; 0x30
 800092e:	4618      	mov	r0, r3
 8000930:	7afa      	ldrb	r2, [r7, #11]
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <main+0x2f4>)
 8000934:	fba3 1302 	umull	r1, r3, r3, r2
 8000938:	08d9      	lsrs	r1, r3, #3
 800093a:	460b      	mov	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	b2db      	uxtb	r3, r3
 8000946:	3330      	adds	r3, #48	; 0x30
 8000948:	4619      	mov	r1, r3
 800094a:	f004 fa07 	bl	8004d5c <iprintf>

	  	  HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f000 fb9b 	bl	800108c <HAL_Delay>
	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000956:	2120      	movs	r1, #32
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <main+0x2f8>)
 800095a:	f000 fe9a 	bl	8001692 <HAL_GPIO_TogglePin>
	  arrayBuffer[0] = 0;
 800095e:	e6a6      	b.n	80006ae <main+0x3a>
 8000960:	20000150 	.word	0x20000150
 8000964:	200000fc 	.word	0x200000fc
 8000968:	cccccccd 	.word	0xcccccccd
 800096c:	40020000 	.word	0x40020000

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	; 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 f9e4 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <SystemClock_Config+0xcc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <SystemClock_Config+0xcc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <SystemClock_Config+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <SystemClock_Config+0xd0>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e0:	2310      	movs	r3, #16
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f003 fae6 	bl	8003fc8 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a02:	f000 f8e5 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 fd48 	bl	80044b8 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a2e:	f000 f8cf 	bl	8000bd0 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <MX_I2C1_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a82:	f000 fe21 	bl	80016c8 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f8a0 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000fc 	.word	0x200000fc
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f003 feea 	bl	80048b0 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f875 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000158 	.word	0x20000158
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a2c      	ldr	r2, [pc, #176]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4812      	ldr	r0, [pc, #72]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000b80:	f000 fd6e 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_GPIO_Init+0xd8>)
 8000b9c:	f000 fbdc 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0xd4>)
 8000bb8:	f000 fbce 	bl	8001358 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fb2a 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <HAL_I2C_MspInit+0xa4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d13b      	bne.n	8000cc6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <HAL_I2C_MspInit+0xac>)
 8000c86:	f000 fb67 	bl	8001358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_I2C_MspInit+0xa8>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	201f      	movs	r0, #31
 8000cac:	f000 faed 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cb0:	201f      	movs	r0, #31
 8000cb2:	f000 fb06 	bl	80012c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2020      	movs	r0, #32
 8000cbc:	f000 fae5 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cc0:	2020      	movs	r0, #32
 8000cc2:	f000 fafe 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12b      	bne.n	8000d56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d46:	2307      	movs	r3, #7
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d52:	f000 fb01 	bl	8001358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f948 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <I2C1_EV_IRQHandler+0x10>)
 8000dc6:	f001 f8e7 	bl	8001f98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000fc 	.word	0x200000fc

08000dd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_ER_IRQHandler+0x10>)
 8000dda:	f001 fa4e 	bl	800227a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000fc 	.word	0x200000fc

08000de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e00a      	b.n	8000e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dfa:	f3af 8000 	nop.w
 8000dfe:	4601      	mov	r1, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	b2ca      	uxtb	r2, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf0      	blt.n	8000dfa <_read+0x12>
	}

return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e009      	b.n	8000e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	60ba      	str	r2, [r7, #8]
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	3301      	adds	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dbf1      	blt.n	8000e34 <_write+0x12>
	}
	return len;
 8000e50:	687b      	ldr	r3, [r7, #4]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_close>:

int _close(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e82:	605a      	str	r2, [r3, #4]
	return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_isatty>:

int _isatty(int file)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
	return 1;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f003 fef2 	bl	8004cdc <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	200001b0 	.word	0x200001b0

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f58:	480d      	ldr	r0, [pc, #52]	; (8000f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5a:	490e      	ldr	r1, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f70:	4c0b      	ldr	r4, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ffd7 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f003 feb1 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fb75 	bl	8000674 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f98:	08006078 	.word	0x08006078
  ldr r2, =_sbss
 8000f9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fa0:	200001b0 	.word	0x200001b0

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f94f 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fdfe 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f967 	bl	80012de <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f92f 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	2000019c 	.word	0x2000019c

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000019c 	.word	0x2000019c

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff3e 	bl	800111c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff31 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d004      	beq.n	8001314 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e00c      	b.n	800132e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2205      	movs	r2, #5
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e159      	b.n	8001628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8148 	bne.w	8001622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80a2 	beq.w	8001622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a56      	ldr	r2, [pc, #344]	; (8001640 <HAL_GPIO_Init+0x2e8>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <HAL_GPIO_Init+0x2e8>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fa:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x2ec>)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a49      	ldr	r2, [pc, #292]	; (8001648 <HAL_GPIO_Init+0x2f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x202>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_GPIO_Init+0x2f4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x1fe>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a47      	ldr	r2, [pc, #284]	; (8001650 <HAL_GPIO_Init+0x2f8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x1fa>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a46      	ldr	r2, [pc, #280]	; (8001654 <HAL_GPIO_Init+0x2fc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x1f6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a45      	ldr	r2, [pc, #276]	; (8001658 <HAL_GPIO_Init+0x300>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x1f2>
 8001546:	2304      	movs	r3, #4
 8001548:	e008      	b.n	800155c <HAL_GPIO_Init+0x204>
 800154a:	2307      	movs	r3, #7
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x204>
 800154e:	2303      	movs	r3, #3
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x204>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x204>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x204>
 800155a:	2300      	movs	r3, #0
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156c:	4935      	ldr	r1, [pc, #212]	; (8001644 <HAL_GPIO_Init+0x2ec>)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_GPIO_Init+0x304>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800159e:	4a2f      	ldr	r2, [pc, #188]	; (800165c <HAL_GPIO_Init+0x304>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_GPIO_Init+0x304>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c8:	4a24      	ldr	r2, [pc, #144]	; (800165c <HAL_GPIO_Init+0x304>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_GPIO_Init+0x304>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f2:	4a1a      	ldr	r2, [pc, #104]	; (800165c <HAL_GPIO_Init+0x304>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_GPIO_Init+0x304>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_GPIO_Init+0x304>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	f67f aea2 	bls.w	8001374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001692:	b480      	push	{r7}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a4:	887a      	ldrh	r2, [r7, #2]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	041a      	lsls	r2, r3, #16
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	400b      	ands	r3, r1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e12b      	b.n	8001932 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff fa9c 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800171a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800172a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800172c:	f003 f898 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4a81      	ldr	r2, [pc, #516]	; (800193c <HAL_I2C_Init+0x274>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d807      	bhi.n	800174c <HAL_I2C_Init+0x84>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a80      	ldr	r2, [pc, #512]	; (8001940 <HAL_I2C_Init+0x278>)
 8001740:	4293      	cmp	r3, r2
 8001742:	bf94      	ite	ls
 8001744:	2301      	movls	r3, #1
 8001746:	2300      	movhi	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	e006      	b.n	800175a <HAL_I2C_Init+0x92>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4a7d      	ldr	r2, [pc, #500]	; (8001944 <HAL_I2C_Init+0x27c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	bf94      	ite	ls
 8001754:	2301      	movls	r3, #1
 8001756:	2300      	movhi	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0e7      	b.n	8001932 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a78      	ldr	r2, [pc, #480]	; (8001948 <HAL_I2C_Init+0x280>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9b      	lsrs	r3, r3, #18
 800176c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	430a      	orrs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <HAL_I2C_Init+0x274>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d802      	bhi.n	800179c <HAL_I2C_Init+0xd4>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	e009      	b.n	80017b0 <HAL_I2C_Init+0xe8>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	4a69      	ldr	r2, [pc, #420]	; (800194c <HAL_I2C_Init+0x284>)
 80017a8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	3301      	adds	r3, #1
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	495c      	ldr	r1, [pc, #368]	; (800193c <HAL_I2C_Init+0x274>)
 80017cc:	428b      	cmp	r3, r1
 80017ce:	d819      	bhi.n	8001804 <HAL_I2C_Init+0x13c>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e59      	subs	r1, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fbb1 f3f3 	udiv	r3, r1, r3
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017e4:	400b      	ands	r3, r1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <HAL_I2C_Init+0x138>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1e59      	subs	r1, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fe:	e051      	b.n	80018a4 <HAL_I2C_Init+0x1dc>
 8001800:	2304      	movs	r3, #4
 8001802:	e04f      	b.n	80018a4 <HAL_I2C_Init+0x1dc>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d111      	bne.n	8001830 <HAL_I2C_Init+0x168>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	440b      	add	r3, r1
 800181a:	fbb0 f3f3 	udiv	r3, r0, r3
 800181e:	3301      	adds	r3, #1
 8001820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e012      	b.n	8001856 <HAL_I2C_Init+0x18e>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1e58      	subs	r0, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	0099      	lsls	r1, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Init+0x196>
 800185a:	2301      	movs	r3, #1
 800185c:	e022      	b.n	80018a4 <HAL_I2C_Init+0x1dc>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10e      	bne.n	8001884 <HAL_I2C_Init+0x1bc>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1e58      	subs	r0, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	460b      	mov	r3, r1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	440b      	add	r3, r1
 8001874:	fbb0 f3f3 	udiv	r3, r0, r3
 8001878:	3301      	adds	r3, #1
 800187a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001882:	e00f      	b.n	80018a4 <HAL_I2C_Init+0x1dc>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	0099      	lsls	r1, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	fbb0 f3f3 	udiv	r3, r0, r3
 800189a:	3301      	adds	r3, #1
 800189c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	6809      	ldr	r1, [r1, #0]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69da      	ldr	r2, [r3, #28]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6911      	ldr	r1, [r2, #16]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68d2      	ldr	r2, [r2, #12]
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2220      	movs	r2, #32
 800191e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	000186a0 	.word	0x000186a0
 8001940:	001e847f 	.word	0x001e847f
 8001944:	003d08ff 	.word	0x003d08ff
 8001948:	431bde83 	.word	0x431bde83
 800194c:	10624dd3 	.word	0x10624dd3

08001950 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	461a      	mov	r2, r3
 800195c:	460b      	mov	r3, r1
 800195e:	817b      	strh	r3, [r7, #10]
 8001960:	4613      	mov	r3, r2
 8001962:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fb86 	bl	8001074 <HAL_GetTick>
 8001968:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b20      	cmp	r3, #32
 8001974:	f040 80e0 	bne.w	8001b38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2319      	movs	r3, #25
 800197e:	2201      	movs	r2, #1
 8001980:	4970      	ldr	r1, [pc, #448]	; (8001b44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f002 f8f6 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800198e:	2302      	movs	r3, #2
 8001990:	e0d3      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_I2C_Master_Transmit+0x50>
 800199c:	2302      	movs	r3, #2
 800199e:	e0cc      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d007      	beq.n	80019c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2221      	movs	r2, #33	; 0x21
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2210      	movs	r2, #16
 80019e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	893a      	ldrh	r2, [r7, #8]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a50      	ldr	r2, [pc, #320]	; (8001b48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a08:	8979      	ldrh	r1, [r7, #10]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	6a3a      	ldr	r2, [r7, #32]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f001 feb8 	bl	8003784 <I2C_MasterRequestWrite>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e08d      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a34:	e066      	b.n	8001b04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	6a39      	ldr	r1, [r7, #32]
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f002 f970 	bl	8003d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00d      	beq.n	8001a62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d107      	bne.n	8001a5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06b      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	781a      	ldrb	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_I2C_Master_Transmit+0x188>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d017      	beq.n	8001ad8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	6a39      	ldr	r1, [r7, #32]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f002 f960 	bl	8003da2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d107      	bne.n	8001b00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e01a      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d194      	bne.n	8001a36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	00100002 	.word	0x00100002
 8001b48:	ffff0000 	.word	0xffff0000

08001b4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	460b      	mov	r3, r1
 8001b5a:	817b      	strh	r3, [r7, #10]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fa88 	bl	8001074 <HAL_GetTick>
 8001b64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 820b 	bne.w	8001f8a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2319      	movs	r3, #25
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	497c      	ldr	r1, [pc, #496]	; (8001d70 <HAL_I2C_Master_Receive+0x224>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f001 fff8 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e1fe      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2C_Master_Receive+0x50>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e1f7      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d007      	beq.n	8001bc2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2222      	movs	r2, #34	; 0x22
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	893a      	ldrh	r2, [r7, #8]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_I2C_Master_Receive+0x228>)
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c04:	8979      	ldrh	r1, [r7, #10]
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f001 fe3c 	bl	8003888 <I2C_MasterRequestRead>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1b8      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d113      	bne.n	8001c4a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e18c      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d11b      	bne.n	8001c8a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e16c      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d11b      	bne.n	8001cca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	e14c      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cf0:	e138      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	f200 80f1 	bhi.w	8001ede <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d123      	bne.n	8001d4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f002 f8bd 	bl	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e139      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d4a:	e10b      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d14e      	bne.n	8001df2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4906      	ldr	r1, [pc, #24]	; (8001d78 <HAL_I2C_Master_Receive+0x22c>)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f001 ff08 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e10e      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
 8001d6e:	bf00      	nop
 8001d70:	00100002 	.word	0x00100002
 8001d74:	ffff0000 	.word	0xffff0000
 8001d78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001df0:	e0b8      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	2200      	movs	r2, #0
 8001dfa:	4966      	ldr	r1, [pc, #408]	; (8001f94 <HAL_I2C_Master_Receive+0x448>)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f001 feb9 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0bf      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	2200      	movs	r2, #0
 8001e56:	494f      	ldr	r1, [pc, #316]	; (8001f94 <HAL_I2C_Master_Receive+0x448>)
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f001 fe8b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e091      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001edc:	e042      	b.n	8001f64 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f001 ffd0 	bl	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e04c      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d118      	bne.n	8001f64 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f aec2 	bne.w	8001cf2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	00010004 	.word	0x00010004

08001f98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fb8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d003      	beq.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x38>
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	f040 80c1 	bne.w	8002152 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_I2C_EV_IRQHandler+0x6e>
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ff0:	d003      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0x62>
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_EV_IRQHandler+0x66>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_I2C_EV_IRQHandler+0x68>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2b01      	cmp	r3, #1
 8002002:	f000 8132 	beq.w	800226a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <HAL_I2C_EV_IRQHandler+0x92>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f001 ffb8 	bl	8003f92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fd93 	bl	8002b4e <I2C_Master_SB>
 8002028:	e092      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_I2C_EV_IRQHandler+0xb2>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	0a5b      	lsrs	r3, r3, #9
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fe09 	bl	8002c5a <I2C_Master_ADD10>
 8002048:	e082      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0xd2>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	0a5b      	lsrs	r3, r3, #9
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fe23 	bl	8002cae <I2C_Master_ADDR>
 8002068:	e072      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03b      	beq.n	80020ee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002084:	f000 80f3 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	09db      	lsrs	r3, r3, #7
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fa0d 	bl	80024cc <I2C_MasterTransmit_TXE>
 80020b2:	e04d      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	089b      	lsrs	r3, r3, #2
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80d6 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	0a5b      	lsrs	r3, r3, #9
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80cf 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020d0:	7bbb      	ldrb	r3, [r7, #14]
 80020d2:	2b21      	cmp	r3, #33	; 0x21
 80020d4:	d103      	bne.n	80020de <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fa94 	bl	8002604 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020dc:	e0c7      	b.n	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	f040 80c4 	bne.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fb02 	bl	80026f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ec:	e0bf      	b.n	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020fc:	f000 80b7 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00f      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x194>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	0a9b      	lsrs	r3, r3, #10
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x194>
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fb77 	bl	8002818 <I2C_MasterReceive_RXNE>
 800212a:	e011      	b.n	8002150 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 809a 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	0a5b      	lsrs	r3, r3, #9
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8093 	beq.w	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 fc16 	bl	800297a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800214e:	e08e      	b.n	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002150:	e08d      	b.n	800226e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e007      	b.n	8002174 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d012      	beq.n	80021a6 <HAL_I2C_EV_IRQHandler+0x20e>
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	0a5b      	lsrs	r3, r3, #9
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00c      	beq.n	80021a6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 ffd4 	bl	800314c <I2C_Slave_ADDR>
 80021a4:	e066      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_I2C_EV_IRQHandler+0x22e>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f001 f80e 	bl	80031e0 <I2C_Slave_STOPF>
 80021c4:	e056      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	2b21      	cmp	r3, #33	; 0x21
 80021ca:	d002      	beq.n	80021d2 <HAL_I2C_EV_IRQHandler+0x23a>
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	2b29      	cmp	r3, #41	; 0x29
 80021d0:	d125      	bne.n	800221e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	09db      	lsrs	r3, r3, #7
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00f      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x266>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	0a9b      	lsrs	r3, r3, #10
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_I2C_EV_IRQHandler+0x266>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 feea 	bl	8002fd0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021fc:	e039      	b.n	8002272 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d033      	beq.n	8002272 <HAL_I2C_EV_IRQHandler+0x2da>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	0a5b      	lsrs	r3, r3, #9
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02d      	beq.n	8002272 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ff17 	bl	800304a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800221c:	e029      	b.n	8002272 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00f      	beq.n	800224a <HAL_I2C_EV_IRQHandler+0x2b2>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	0a9b      	lsrs	r3, r3, #10
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 ff22 	bl	800308c <I2C_SlaveReceive_RXNE>
 8002248:	e014      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	0a5b      	lsrs	r3, r3, #9
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 ff50 	bl	8003108 <I2C_SlaveReceive_BTF>
 8002268:	e004      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800226a:	bf00      	nop
 800226c:	e002      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800226e:	bf00      	nop
 8002270:	e000      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002272:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b08a      	sub	sp, #40	; 0x28
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00e      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0x4e>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022c6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <HAL_I2C_ER_IRQHandler+0x78>
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	0a9b      	lsrs	r3, r3, #10
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d03f      	beq.n	800237e <HAL_I2C_ER_IRQHandler+0x104>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d039      	beq.n	800237e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800230a:	7efb      	ldrb	r3, [r7, #27]
 800230c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002324:	7ebb      	ldrb	r3, [r7, #26]
 8002326:	2b20      	cmp	r3, #32
 8002328:	d112      	bne.n	8002350 <HAL_I2C_ER_IRQHandler+0xd6>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <HAL_I2C_ER_IRQHandler+0xd6>
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b21      	cmp	r3, #33	; 0x21
 8002334:	d008      	beq.n	8002348 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b29      	cmp	r3, #41	; 0x29
 800233a:	d005      	beq.n	8002348 <HAL_I2C_ER_IRQHandler+0xce>
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b28      	cmp	r3, #40	; 0x28
 8002340:	d106      	bne.n	8002350 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b21      	cmp	r3, #33	; 0x21
 8002346:	d103      	bne.n	8002350 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 f879 	bl	8003440 <I2C_Slave_AF>
 800234e:	e016      	b.n	800237e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002358:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002362:	7efb      	ldrb	r3, [r7, #27]
 8002364:	2b10      	cmp	r3, #16
 8002366:	d002      	beq.n	800236e <HAL_I2C_ER_IRQHandler+0xf4>
 8002368:	7efb      	ldrb	r3, [r7, #27]
 800236a:	2b40      	cmp	r3, #64	; 0x40
 800236c:	d107      	bne.n	800237e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	0adb      	lsrs	r3, r3, #11
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00e      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x12e>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80023a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 f8b0 	bl	8003520 <I2C_ITError>
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
 8002424:	4613      	mov	r3, r2
 8002426:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a6:	b2db      	uxtb	r3, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d150      	bne.n	8002594 <I2C_MasterTransmit_TXE+0xc8>
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b21      	cmp	r3, #33	; 0x21
 80024f6:	d14d      	bne.n	8002594 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d01d      	beq.n	800253a <I2C_MasterTransmit_TXE+0x6e>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b20      	cmp	r3, #32
 8002502:	d01a      	beq.n	800253a <I2C_MasterTransmit_TXE+0x6e>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800250a:	d016      	beq.n	800253a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800251a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2211      	movs	r2, #17
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff48 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002538:	e060      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002548:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002558:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d107      	bne.n	8002584 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff63 	bl	8002448 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002582:	e03b      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff1b 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002592:	e033      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b21      	cmp	r3, #33	; 0x21
 8002598:	d005      	beq.n	80025a6 <I2C_MasterTransmit_TXE+0xda>
 800259a:	7bbb      	ldrb	r3, [r7, #14]
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d12d      	bne.n	80025fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b22      	cmp	r3, #34	; 0x22
 80025a4:	d12a      	bne.n	80025fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80025c0:	e01c      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b40      	cmp	r3, #64	; 0x40
 80025cc:	d103      	bne.n	80025d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f88e 	bl	80026f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80025d4:	e012      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025fa:	e7ff      	b.n	80025fc <I2C_MasterTransmit_TXE+0x130>
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b21      	cmp	r3, #33	; 0x21
 800261c:	d164      	bne.n	80026e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d012      	beq.n	800264e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800264c:	e04c      	b.n	80026e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d01d      	beq.n	8002690 <I2C_MasterTransmit_BTF+0x8c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d01a      	beq.n	8002690 <I2C_MasterTransmit_BTF+0x8c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002660:	d016      	beq.n	8002690 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002670:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2211      	movs	r2, #17
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fe9d 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
}
 800268e:	e02b      	b.n	80026e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800269e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d107      	bne.n	80026da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff feb8 	bl	8002448 <HAL_I2C_MemTxCpltCallback>
}
 80026d8:	e006      	b.n	80026e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fe70 	bl	80023c8 <HAL_I2C_MasterTxCpltCallback>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11d      	bne.n	8002744 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10b      	bne.n	8002728 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002726:	e073      	b.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	b29b      	uxth	r3, r3
 800272e:	121b      	asrs	r3, r3, #8
 8002730:	b2da      	uxtb	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002742:	e065      	b.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10b      	bne.n	8002764 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002750:	b2da      	uxtb	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002762:	e055      	b.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	2b02      	cmp	r3, #2
 800276a:	d151      	bne.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b22      	cmp	r3, #34	; 0x22
 8002770:	d10d      	bne.n	800278e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002780:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800278c:	e040      	b.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b21      	cmp	r3, #33	; 0x21
 800279c:	d112      	bne.n	80027c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027c2:	e025      	b.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d120      	bne.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b21      	cmp	r3, #33	; 0x21
 80027d2:	d11d      	bne.n	8002810 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fe1c 	bl	8002448 <HAL_I2C_MemTxCpltCallback>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b22      	cmp	r3, #34	; 0x22
 800282a:	f040 80a2 	bne.w	8002972 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d921      	bls.n	8002880 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b03      	cmp	r3, #3
 800286a:	f040 8082 	bne.w	8002972 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800287e:	e078      	b.n	8002972 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b02      	cmp	r3, #2
 8002886:	d074      	beq.n	8002972 <I2C_MasterReceive_RXNE+0x15a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d002      	beq.n	8002894 <I2C_MasterReceive_RXNE+0x7c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d16e      	bne.n	8002972 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f001 fac5 	bl	8003e24 <I2C_WaitOnSTOPRequestThroughIT>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d142      	bne.n	8002926 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d10a      	bne.n	8002910 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fda7 	bl	800245c <HAL_I2C_MemRxCpltCallback>
}
 800290e:	e030      	b.n	8002972 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2212      	movs	r2, #18
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fd5c 	bl	80023dc <HAL_I2C_MasterRxCpltCallback>
}
 8002924:	e025      	b.n	8002972 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002934:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff fd7f 	bl	8002470 <HAL_I2C_ErrorCallback>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b04      	cmp	r3, #4
 8002990:	d11b      	bne.n	80029ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80029c8:	e0bd      	b.n	8002b46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d129      	bne.n	8002a28 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00a      	beq.n	8002a00 <I2C_MasterReceive_BTF+0x86>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d007      	beq.n	8002a00 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a26:	e08e      	b.n	8002b46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d176      	bne.n	8002b20 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d002      	beq.n	8002a3e <I2C_MasterReceive_BTF+0xc4>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d108      	bne.n	8002a50 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e019      	b.n	8002a84 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <I2C_MasterReceive_BTF+0xe2>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d108      	bne.n	8002a6e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e00a      	b.n	8002a84 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d007      	beq.n	8002a84 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ade:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d10a      	bne.n	8002b0a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fcaa 	bl	800245c <HAL_I2C_MemRxCpltCallback>
}
 8002b08:	e01d      	b.n	8002b46 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2212      	movs	r2, #18
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fc5f 	bl	80023dc <HAL_I2C_MasterRxCpltCallback>
}
 8002b1e:	e012      	b.n	8002b46 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d117      	bne.n	8002b92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b7c:	e067      	b.n	8002c4e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]
}
 8002b90:	e05d      	b.n	8002c4e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b9a:	d133      	bne.n	8002c04 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b21      	cmp	r3, #33	; 0x21
 8002ba6:	d109      	bne.n	8002bbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	e008      	b.n	8002bce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <I2C_Master_SB+0x92>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d032      	beq.n	8002c4e <I2C_Master_SB+0x100>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d02d      	beq.n	8002c4e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c00:	605a      	str	r2, [r3, #4]
}
 8002c02:	e024      	b.n	8002c4e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10e      	bne.n	8002c2a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	11db      	asrs	r3, r3, #7
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0306 	and.w	r3, r3, #6
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f063 030f 	orn	r3, r3, #15
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]
}
 8002c28:	e011      	b.n	8002c4e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10d      	bne.n	8002c4e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	11db      	asrs	r3, r3, #7
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f003 0306 	and.w	r3, r3, #6
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f063 030e 	orn	r3, r3, #14
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <I2C_Master_ADD10+0x26>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <I2C_Master_ADD10+0x48>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca0:	605a      	str	r2, [r3, #4]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b091      	sub	sp, #68	; 0x44
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b22      	cmp	r3, #34	; 0x22
 8002cd6:	f040 8169 	bne.w	8002fac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <I2C_Master_ADDR+0x54>
 8002ce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d10b      	bne.n	8002d02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cea:	2300      	movs	r3, #0
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	e160      	b.n	8002fc4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11d      	bne.n	8002d46 <I2C_Master_ADDR+0x98>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d12:	d118      	bne.n	8002d46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
 8002d44:	e13e      	b.n	8002fc4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d113      	bne.n	8002d78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e115      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	f040 808a 	bne.w	8002e98 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d8a:	d137      	bne.n	8002dfc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002daa:	d113      	bne.n	8002dd4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	e0e7      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e0d3      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d02e      	beq.n	8002e60 <I2C_Master_ADDR+0x1b2>
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d02b      	beq.n	8002e60 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d102      	bne.n	8002e14 <I2C_Master_ADDR+0x166>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d125      	bne.n	8002e60 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d00e      	beq.n	8002e38 <I2C_Master_ADDR+0x18a>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d00b      	beq.n	8002e38 <I2C_Master_ADDR+0x18a>
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d008      	beq.n	8002e38 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e007      	b.n	8002e48 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e46:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	e0a1      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e085      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d14d      	bne.n	8002f3e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d016      	beq.n	8002ed6 <I2C_Master_ADDR+0x228>
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d013      	beq.n	8002ed6 <I2C_Master_ADDR+0x228>
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d010      	beq.n	8002ed6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e007      	b.n	8002ee6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef4:	d117      	bne.n	8002f26 <I2C_Master_ADDR+0x278>
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002efc:	d00b      	beq.n	8002f16 <I2C_Master_ADDR+0x268>
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d008      	beq.n	8002f16 <I2C_Master_ADDR+0x268>
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d005      	beq.n	8002f16 <I2C_Master_ADDR+0x268>
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d002      	beq.n	8002f16 <I2C_Master_ADDR+0x268>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d107      	bne.n	8002f26 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e032      	b.n	8002fa4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f4c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5c:	d117      	bne.n	8002f8e <I2C_Master_ADDR+0x2e0>
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f64:	d00b      	beq.n	8002f7e <I2C_Master_ADDR+0x2d0>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d008      	beq.n	8002f7e <I2C_Master_ADDR+0x2d0>
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d005      	beq.n	8002f7e <I2C_Master_ADDR+0x2d0>
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d002      	beq.n	8002f7e <I2C_Master_ADDR+0x2d0>
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d107      	bne.n	8002f8e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002faa:	e00b      	b.n	8002fc4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
}
 8002fc2:	e7ff      	b.n	8002fc4 <I2C_Master_ADDR+0x316>
 8002fc4:	bf00      	nop
 8002fc6:	3744      	adds	r7, #68	; 0x44
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02b      	beq.n	8003042 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d114      	bne.n	8003042 <I2C_SlaveTransmit_TXE+0x72>
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b29      	cmp	r3, #41	; 0x29
 800301c:	d111      	bne.n	8003042 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2221      	movs	r2, #33	; 0x21
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2228      	movs	r2, #40	; 0x28
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff f9d7 	bl	80023f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d011      	beq.n	8003080 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02c      	beq.n	8003100 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d114      	bne.n	8003100 <I2C_SlaveReceive_RXNE+0x74>
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b2a      	cmp	r3, #42	; 0x2a
 80030da:	d111      	bne.n	8003100 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2222      	movs	r2, #34	; 0x22
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2228      	movs	r2, #40	; 0x28
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff f982 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d012      	beq.n	8003140 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003166:	2b28      	cmp	r3, #40	; 0x28
 8003168:	d127      	bne.n	80031ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	09db      	lsrs	r3, r3, #7
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	81bb      	strh	r3, [r7, #12]
 800319c:	e002      	b.n	80031a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80031ac:	89ba      	ldrh	r2, [r7, #12]
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff f930 	bl	8002418 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031b8:	e00e      	b.n	80031d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	d172      	bne.n	8003324 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b22      	cmp	r3, #34	; 0x22
 8003242:	d002      	beq.n	800324a <I2C_Slave_STOPF+0x6a>
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b2a      	cmp	r3, #42	; 0x2a
 8003248:	d135      	bne.n	80032b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f859 	bl	800133a <HAL_DMA_GetState>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d049      	beq.n	8003322 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	4a69      	ldr	r2, [pc, #420]	; (8003438 <I2C_Slave_STOPF+0x258>)
 8003294:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f82b 	bl	80012f6 <HAL_DMA_Abort_IT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03d      	beq.n	8003322 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032b0:	4610      	mov	r0, r2
 80032b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032b4:	e035      	b.n	8003322 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe f823 	bl	800133a <HAL_DMA_GetState>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d014      	beq.n	8003324 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <I2C_Slave_STOPF+0x258>)
 8003300:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fff5 	bl	80012f6 <HAL_DMA_Abort_IT>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
 8003320:	e000      	b.n	8003324 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003322:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d03e      	beq.n	80033ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d112      	bne.n	8003362 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d112      	bne.n	8003396 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0204 	orr.w	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8b3 	bl	8003520 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80033ba:	e039      	b.n	8003430 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b2a      	cmp	r3, #42	; 0x2a
 80033c0:	d109      	bne.n	80033d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2228      	movs	r2, #40	; 0x28
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff f817 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b28      	cmp	r3, #40	; 0x28
 80033e0:	d111      	bne.n	8003406 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a15      	ldr	r2, [pc, #84]	; (800343c <I2C_Slave_STOPF+0x25c>)
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff f818 	bl	8002434 <HAL_I2C_ListenCpltCallback>
}
 8003404:	e014      	b.n	8003430 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	2b22      	cmp	r3, #34	; 0x22
 800340c:	d002      	beq.n	8003414 <I2C_Slave_STOPF+0x234>
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b22      	cmp	r3, #34	; 0x22
 8003412:	d10d      	bne.n	8003430 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe ffea 	bl	8002404 <HAL_I2C_SlaveRxCpltCallback>
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08003a25 	.word	0x08003a25
 800343c:	ffff0000 	.word	0xffff0000

08003440 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d002      	beq.n	8003462 <I2C_Slave_AF+0x22>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b20      	cmp	r3, #32
 8003460:	d129      	bne.n	80034b6 <I2C_Slave_AF+0x76>
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d126      	bne.n	80034b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a2c      	ldr	r2, [pc, #176]	; (800351c <I2C_Slave_AF+0xdc>)
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800347c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003486:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe ffc0 	bl	8002434 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80034b4:	e02e      	b.n	8003514 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b21      	cmp	r3, #33	; 0x21
 80034ba:	d126      	bne.n	800350a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a17      	ldr	r2, [pc, #92]	; (800351c <I2C_Slave_AF+0xdc>)
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2221      	movs	r2, #33	; 0x21
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe ff74 	bl	80023f0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003508:	e004      	b.n	8003514 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003512:	615a      	str	r2, [r3, #20]
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	ffff0000 	.word	0xffff0000

08003520 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003536:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003538:	7bbb      	ldrb	r3, [r7, #14]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d002      	beq.n	8003544 <I2C_ITError+0x24>
 800353e:	7bbb      	ldrb	r3, [r7, #14]
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d10a      	bne.n	800355a <I2C_ITError+0x3a>
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b22      	cmp	r3, #34	; 0x22
 8003548:	d107      	bne.n	800355a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003558:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003560:	2b28      	cmp	r3, #40	; 0x28
 8003562:	d107      	bne.n	8003574 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2228      	movs	r2, #40	; 0x28
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003572:	e015      	b.n	80035a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003582:	d00a      	beq.n	800359a <I2C_ITError+0x7a>
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b60      	cmp	r3, #96	; 0x60
 8003588:	d007      	beq.n	800359a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ae:	d162      	bne.n	8003676 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d020      	beq.n	8003610 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	4a6a      	ldr	r2, [pc, #424]	; (800377c <I2C_ITError+0x25c>)
 80035d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fe8b 	bl	80012f6 <HAL_DMA_Abort_IT>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8089 	beq.w	80036fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800360a:	4610      	mov	r0, r2
 800360c:	4798      	blx	r3
 800360e:	e074      	b.n	80036fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	4a59      	ldr	r2, [pc, #356]	; (800377c <I2C_ITError+0x25c>)
 8003616:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fe6a 	bl	80012f6 <HAL_DMA_Abort_IT>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d068      	beq.n	80036fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d10b      	bne.n	800364e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003670:	4610      	mov	r0, r2
 8003672:	4798      	blx	r3
 8003674:	e041      	b.n	80036fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b60      	cmp	r3, #96	; 0x60
 8003680:	d125      	bne.n	80036ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d10b      	bne.n	80036b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe fedc 	bl	8002484 <HAL_I2C_AbortCpltCallback>
 80036cc:	e015      	b.n	80036fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d10b      	bne.n	80036f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe febb 	bl	8002470 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003736:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d113      	bne.n	8003774 <I2C_ITError+0x254>
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b28      	cmp	r3, #40	; 0x28
 8003750:	d110      	bne.n	8003774 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <I2C_ITError+0x260>)
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe fe60 	bl	8002434 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08003a25 	.word	0x08003a25
 8003780:	ffff0000 	.word	0xffff0000

08003784 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	460b      	mov	r3, r1
 8003792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d006      	beq.n	80037ae <I2C_MasterRequestWrite+0x2a>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d003      	beq.n	80037ae <I2C_MasterRequestWrite+0x2a>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ac:	d108      	bne.n	80037c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e00b      	b.n	80037d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d107      	bne.n	80037d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f9c5 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fe:	d103      	bne.n	8003808 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e035      	b.n	8003878 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003814:	d108      	bne.n	8003828 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003824:	611a      	str	r2, [r3, #16]
 8003826:	e01b      	b.n	8003860 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003828:	897b      	ldrh	r3, [r7, #10]
 800382a:	11db      	asrs	r3, r3, #7
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 0306 	and.w	r3, r3, #6
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f063 030f 	orn	r3, r3, #15
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	490e      	ldr	r1, [pc, #56]	; (8003880 <I2C_MasterRequestWrite+0xfc>)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9eb 	bl	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e010      	b.n	8003878 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <I2C_MasterRequestWrite+0x100>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f9db 	bl	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	00010008 	.word	0x00010008
 8003884:	00010002 	.word	0x00010002

08003888 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	460b      	mov	r3, r1
 8003896:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d006      	beq.n	80038c2 <I2C_MasterRequestRead+0x3a>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d003      	beq.n	80038c2 <I2C_MasterRequestRead+0x3a>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c0:	d108      	bne.n	80038d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e00b      	b.n	80038ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	2b11      	cmp	r3, #17
 80038da:	d107      	bne.n	80038ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f93b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00d      	beq.n	8003920 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003912:	d103      	bne.n	800391c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e079      	b.n	8003a14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003928:	d108      	bne.n	800393c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800392a:	897b      	ldrh	r3, [r7, #10]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	e05f      	b.n	80039fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	11db      	asrs	r3, r3, #7
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f003 0306 	and.w	r3, r3, #6
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f063 030f 	orn	r3, r3, #15
 800394c:	b2da      	uxtb	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4930      	ldr	r1, [pc, #192]	; (8003a1c <I2C_MasterRequestRead+0x194>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f961 	bl	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e054      	b.n	8003a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4929      	ldr	r1, [pc, #164]	; (8003a20 <I2C_MasterRequestRead+0x198>)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f951 	bl	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e044      	b.n	8003a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f8d9 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d6:	d103      	bne.n	80039e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e017      	b.n	8003a14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	11db      	asrs	r3, r3, #7
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0306 	and.w	r3, r3, #6
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f063 030e 	orn	r3, r3, #14
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4907      	ldr	r1, [pc, #28]	; (8003a20 <I2C_MasterRequestRead+0x198>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f90d 	bl	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	00010008 	.word	0x00010008
 8003a20:	00010002 	.word	0x00010002

08003a24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a3e:	4b4b      	ldr	r3, [pc, #300]	; (8003b6c <I2C_DMAAbort+0x148>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	08db      	lsrs	r3, r3, #3
 8003a44:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <I2C_DMAAbort+0x14c>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0a1a      	lsrs	r2, r3, #8
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003a6a:	e00a      	b.n	8003a82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d0ea      	beq.n	8003a58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	2200      	movs	r2, #0
 8003a90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b60      	cmp	r3, #96	; 0x60
 8003af2:	d10e      	bne.n	8003b12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7fe fcba 	bl	8002484 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b10:	e027      	b.n	8003b62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b18:	2b28      	cmp	r3, #40	; 0x28
 8003b1a:	d117      	bne.n	8003b4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2228      	movs	r2, #40	; 0x28
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b4a:	e007      	b.n	8003b5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003b5c:	6978      	ldr	r0, [r7, #20]
 8003b5e:	f7fe fc87 	bl	8002470 <HAL_I2C_ErrorCallback>
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	14f8b589 	.word	0x14f8b589

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e025      	b.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d021      	beq.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd fa71 	bl	8001074 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d116      	bne.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e023      	b.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10d      	bne.n	8003bf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	e00c      	b.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	43da      	mvns	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4013      	ands	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d0b6      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	60f8      	str	r0, [r7, #12]
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c30:	e051      	b.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c40:	d123      	bne.n	8003c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e046      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d021      	beq.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fd f9ef 	bl	8001074 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d116      	bne.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e020      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10c      	bne.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e00b      	b.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	43da      	mvns	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d18d      	bne.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d2c:	e02d      	b.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f900 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e02d      	b.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d021      	beq.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd f995 	bl	8001074 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d116      	bne.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f043 0220 	orr.w	r2, r3, #32
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e007      	b.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d1ca      	bne.n	8003d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dae:	e02d      	b.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f8bf 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e02d      	b.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d021      	beq.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc8:	f7fd f954 	bl	8001074 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e007      	b.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d1ca      	bne.n	8003db0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	0a1a      	lsrs	r2, r3, #8
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e008      	b.n	8003e74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d0e9      	beq.n	8003e46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000000 	.word	0x20000000
 8003e84:	14f8b589 	.word	0x14f8b589

08003e88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e94:	e042      	b.n	8003f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d119      	bne.n	8003ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0210 	mvn.w	r2, #16
 8003eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e029      	b.n	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fd f8cc 	bl	8001074 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d1b5      	bne.n	8003e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d11b      	bne.n	8003f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fa2:	d103      	bne.n	8003fac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003faa:	e007      	b.n	8003fbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fb4:	d102      	bne.n	8003fbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e264      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d075      	beq.n	80040d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fe6:	4ba3      	ldr	r3, [pc, #652]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d00c      	beq.n	800400c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff2:	4ba0      	ldr	r3, [pc, #640]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d112      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffe:	4b9d      	ldr	r3, [pc, #628]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400a:	d10b      	bne.n	8004024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	4b99      	ldr	r3, [pc, #612]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05b      	beq.n	80040d0 <HAL_RCC_OscConfig+0x108>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d157      	bne.n	80040d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e23f      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d106      	bne.n	800403c <HAL_RCC_OscConfig+0x74>
 800402e:	4b91      	ldr	r3, [pc, #580]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a90      	ldr	r2, [pc, #576]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x98>
 8004046:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a87      	ldr	r2, [pc, #540]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0xb0>
 8004060:	4b84      	ldr	r3, [pc, #528]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a83      	ldr	r2, [pc, #524]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b81      	ldr	r3, [pc, #516]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a80      	ldr	r2, [pc, #512]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fc fff8 	bl	8001074 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004088:	f7fc fff4 	bl	8001074 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e204      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b76      	ldr	r3, [pc, #472]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0xc0>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fc ffe4 	bl	8001074 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fc ffe0 	bl	8001074 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1f0      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	4b6c      	ldr	r3, [pc, #432]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0xe8>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040de:	4b65      	ldr	r3, [pc, #404]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b62      	ldr	r3, [pc, #392]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f6:	4b5f      	ldr	r3, [pc, #380]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b5c      	ldr	r3, [pc, #368]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x152>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1c4      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4952      	ldr	r1, [pc, #328]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <HAL_RCC_OscConfig+0x2b0>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fc ff99 	bl	8001074 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004146:	f7fc ff95 	bl	8001074 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1a5      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4940      	ldr	r1, [pc, #256]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b3f      	ldr	r3, [pc, #252]	; (8004278 <HAL_RCC_OscConfig+0x2b0>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fc ff78 	bl	8001074 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004188:	f7fc ff74 	bl	8001074 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e184      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d030      	beq.n	8004214 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_OscConfig+0x2b4>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c0:	f7fc ff58 	bl	8001074 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fc ff54 	bl	8001074 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e164      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x200>
 80041e6:	e015      	b.n	8004214 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_OscConfig+0x2b4>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ee:	f7fc ff41 	bl	8001074 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f6:	f7fc ff3d 	bl	8001074 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e14d      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f0      	bne.n	80041f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a0 	beq.w	8004362 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_OscConfig+0x2b8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d121      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_RCC_OscConfig+0x2b8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_RCC_OscConfig+0x2b8>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fc ff03 	bl	8001074 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e011      	b.n	8004296 <HAL_RCC_OscConfig+0x2ce>
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	42470000 	.word	0x42470000
 800427c:	42470e80 	.word	0x42470e80
 8004280:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004284:	f7fc fef6 	bl	8001074 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e106      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b85      	ldr	r3, [pc, #532]	; (80044ac <HAL_RCC_OscConfig+0x4e4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x2f0>
 80042aa:	4b81      	ldr	r3, [pc, #516]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a80      	ldr	r2, [pc, #512]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	e01c      	b.n	80042f2 <HAL_RCC_OscConfig+0x32a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d10c      	bne.n	80042da <HAL_RCC_OscConfig+0x312>
 80042c0:	4b7b      	ldr	r3, [pc, #492]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	4a7a      	ldr	r2, [pc, #488]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042c6:	f043 0304 	orr.w	r3, r3, #4
 80042ca:	6713      	str	r3, [r2, #112]	; 0x70
 80042cc:	4b78      	ldr	r3, [pc, #480]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a77      	ldr	r2, [pc, #476]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	e00b      	b.n	80042f2 <HAL_RCC_OscConfig+0x32a>
 80042da:	4b75      	ldr	r3, [pc, #468]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	4a74      	ldr	r2, [pc, #464]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	6713      	str	r3, [r2, #112]	; 0x70
 80042e6:	4b72      	ldr	r3, [pc, #456]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a71      	ldr	r2, [pc, #452]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d015      	beq.n	8004326 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fa:	f7fc febb 	bl	8001074 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fc feb7 	bl	8001074 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0c5      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ee      	beq.n	8004302 <HAL_RCC_OscConfig+0x33a>
 8004324:	e014      	b.n	8004350 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fc fea5 	bl	8001074 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fc fea1 	bl	8001074 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0af      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004344:	4b5a      	ldr	r3, [pc, #360]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ee      	bne.n	800432e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a55      	ldr	r2, [pc, #340]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 809b 	beq.w	80044a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b08      	cmp	r3, #8
 8004376:	d05c      	beq.n	8004432 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d141      	bne.n	8004404 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004380:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <HAL_RCC_OscConfig+0x4ec>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fc fe75 	bl	8001074 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438e:	f7fc fe71 	bl	8001074 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e081      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	019b      	lsls	r3, r3, #6
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	3b01      	subs	r3, #1
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	4937      	ldr	r1, [pc, #220]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCC_OscConfig+0x4ec>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fc fe4a 	bl	8001074 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fc fe46 	bl	8001074 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e056      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x41c>
 8004402:	e04e      	b.n	80044a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_OscConfig+0x4ec>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fc fe33 	bl	8001074 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004412:	f7fc fe2f 	bl	8001074 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e03f      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x44a>
 8004430:	e037      	b.n	80044a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e032      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443e:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <HAL_RCC_OscConfig+0x4e8>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d028      	beq.n	800449e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d121      	bne.n	800449e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d11a      	bne.n	800449e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446e:	4013      	ands	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004474:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004476:	4293      	cmp	r3, r2
 8004478:	d111      	bne.n	800449e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	3b01      	subs	r3, #1
 8004488:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d107      	bne.n	800449e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40007000 	.word	0x40007000
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470060 	.word	0x42470060

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0cc      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b68      	ldr	r3, [pc, #416]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d90c      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0b8      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a58      	ldr	r2, [pc, #352]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004524:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a52      	ldr	r2, [pc, #328]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800452e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	494d      	ldr	r1, [pc, #308]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d044      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d119      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e07f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d003      	beq.n	8004576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e06f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e067      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004596:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f023 0203 	bic.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4934      	ldr	r1, [pc, #208]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a8:	f7fc fd64 	bl	8001074 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b0:	f7fc fd60 	bl	8001074 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	4b2b      	ldr	r3, [pc, #172]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 020c 	and.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d1eb      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d20c      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e032      	b.n	8004666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4916      	ldr	r1, [pc, #88]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	490e      	ldr	r1, [pc, #56]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800463e:	f000 f821 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490a      	ldr	r1, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1c8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fcc4 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023c00 	.word	0x40023c00
 8004674:	40023800 	.word	0x40023800
 8004678:	08005fb8 	.word	0x08005fb8
 800467c:	20000000 	.word	0x20000000
 8004680:	20000004 	.word	0x20000004

08004684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	2300      	movs	r3, #0
 8004696:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469c:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0x40>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	f200 80bd 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x1a4>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x34>
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d003      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x3a>
 80046b6:	e0b7      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b8:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046ba:	60bb      	str	r3, [r7, #8]
       break;
 80046bc:	e0b7      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046be:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046c0:	60bb      	str	r3, [r7, #8]
      break;
 80046c2:	e0b4      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c4:	4b5d      	ldr	r3, [pc, #372]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ce:	4b5b      	ldr	r3, [pc, #364]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04d      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046da:	4b58      	ldr	r3, [pc, #352]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	099b      	lsrs	r3, r3, #6
 80046e0:	461a      	mov	r2, r3
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	ea02 0800 	and.w	r8, r2, r0
 80046f2:	ea03 0901 	and.w	r9, r3, r1
 80046f6:	4640      	mov	r0, r8
 80046f8:	4649      	mov	r1, r9
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	014b      	lsls	r3, r1, #5
 8004704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004708:	0142      	lsls	r2, r0, #5
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	ebb0 0008 	subs.w	r0, r0, r8
 8004712:	eb61 0109 	sbc.w	r1, r1, r9
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	018b      	lsls	r3, r1, #6
 8004720:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004724:	0182      	lsls	r2, r0, #6
 8004726:	1a12      	subs	r2, r2, r0
 8004728:	eb63 0301 	sbc.w	r3, r3, r1
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	00d9      	lsls	r1, r3, #3
 8004736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473a:	00d0      	lsls	r0, r2, #3
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	eb12 0208 	adds.w	r2, r2, r8
 8004744:	eb43 0309 	adc.w	r3, r3, r9
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	0259      	lsls	r1, r3, #9
 8004752:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004756:	0250      	lsls	r0, r2, #9
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	f7fb fd8a 	bl	8000280 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e04a      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b31      	ldr	r3, [pc, #196]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	ea02 0400 	and.w	r4, r2, r0
 800478e:	ea03 0501 	and.w	r5, r3, r1
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	014b      	lsls	r3, r1, #5
 80047a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047a4:	0142      	lsls	r2, r0, #5
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	1b00      	subs	r0, r0, r4
 80047ac:	eb61 0105 	sbc.w	r1, r1, r5
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	018b      	lsls	r3, r1, #6
 80047ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047be:	0182      	lsls	r2, r0, #6
 80047c0:	1a12      	subs	r2, r2, r0
 80047c2:	eb63 0301 	sbc.w	r3, r3, r1
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	00d9      	lsls	r1, r3, #3
 80047d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047d4:	00d0      	lsls	r0, r2, #3
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	1912      	adds	r2, r2, r4
 80047dc:	eb45 0303 	adc.w	r3, r5, r3
 80047e0:	f04f 0000 	mov.w	r0, #0
 80047e4:	f04f 0100 	mov.w	r1, #0
 80047e8:	0299      	lsls	r1, r3, #10
 80047ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047ee:	0290      	lsls	r0, r2, #10
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	f7fb fd3e 	bl	8000280 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	60bb      	str	r3, [r7, #8]
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800482a:	60bb      	str	r3, [r7, #8]
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	68bb      	ldr	r3, [r7, #8]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	00f42400 	.word	0x00f42400
 8004844:	007a1200 	.word	0x007a1200

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000000 	.word	0x20000000

08004860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004864:	f7ff fff0 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08005fc8 	.word	0x08005fc8

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800488c:	f7ff ffdc 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0b5b      	lsrs	r3, r3, #13
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4903      	ldr	r1, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08005fc8 	.word	0x08005fc8

080048b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e03f      	b.n	8004942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fa00 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	; 0x24
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f829 	bl	800494c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b09f      	sub	sp, #124	; 0x7c
 8004952:	af00      	add	r7, sp, #0
 8004954:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004962:	68d9      	ldr	r1, [r3, #12]
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	ea40 0301 	orr.w	r3, r0, r1
 800496c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	431a      	orrs	r2, r3
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004990:	f021 010c 	bic.w	r1, r1, #12
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499a:	430b      	orrs	r3, r1
 800499c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	6999      	ldr	r1, [r3, #24]
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	ea40 0301 	orr.w	r3, r0, r1
 80049b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4bc5      	ldr	r3, [pc, #788]	; (8004cd0 <UART_SetConfig+0x384>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d004      	beq.n	80049ca <UART_SetConfig+0x7e>
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4bc3      	ldr	r3, [pc, #780]	; (8004cd4 <UART_SetConfig+0x388>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ca:	f7ff ff5d 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 80049ce:	6778      	str	r0, [r7, #116]	; 0x74
 80049d0:	e002      	b.n	80049d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049d2:	f7ff ff45 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 80049d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e0:	f040 80b6 	bne.w	8004b50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e6:	461c      	mov	r4, r3
 80049e8:	f04f 0500 	mov.w	r5, #0
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	6439      	str	r1, [r7, #64]	; 0x40
 80049f4:	415b      	adcs	r3, r3
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049fc:	1912      	adds	r2, r2, r4
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	00d9      	lsls	r1, r3, #3
 8004a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a10:	00d0      	lsls	r0, r2, #3
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	1911      	adds	r1, r2, r4
 8004a18:	6639      	str	r1, [r7, #96]	; 0x60
 8004a1a:	416b      	adcs	r3, r5
 8004a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	461a      	mov	r2, r3
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	1891      	adds	r1, r2, r2
 8004a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a2c:	415b      	adcs	r3, r3
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a38:	f7fb fc22 	bl	8000280 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4ba5      	ldr	r3, [pc, #660]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	011e      	lsls	r6, r3, #4
 8004a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	f04f 0500 	mov.w	r5, #0
 8004a52:	4622      	mov	r2, r4
 8004a54:	462b      	mov	r3, r5
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	6339      	str	r1, [r7, #48]	; 0x30
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a62:	1912      	adds	r2, r2, r4
 8004a64:	eb45 0303 	adc.w	r3, r5, r3
 8004a68:	f04f 0000 	mov.w	r0, #0
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	00d9      	lsls	r1, r3, #3
 8004a72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a76:	00d0      	lsls	r0, r2, #3
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	1911      	adds	r1, r2, r4
 8004a7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a80:	416b      	adcs	r3, r5
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a92:	415b      	adcs	r3, r3
 8004a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a9e:	f7fb fbef 	bl	8000280 <__aeabi_uldivmod>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4b8c      	ldr	r3, [pc, #560]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	2164      	movs	r1, #100	; 0x64
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	3332      	adds	r3, #50	; 0x32
 8004aba:	4a87      	ldr	r2, [pc, #540]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac8:	441e      	add	r6, r3
 8004aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004acc:	4618      	mov	r0, r3
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	1894      	adds	r4, r2, r2
 8004ad8:	623c      	str	r4, [r7, #32]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ae2:	1812      	adds	r2, r2, r0
 8004ae4:	eb41 0303 	adc.w	r3, r1, r3
 8004ae8:	f04f 0400 	mov.w	r4, #0
 8004aec:	f04f 0500 	mov.w	r5, #0
 8004af0:	00dd      	lsls	r5, r3, #3
 8004af2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004af6:	00d4      	lsls	r4, r2, #3
 8004af8:	4622      	mov	r2, r4
 8004afa:	462b      	mov	r3, r5
 8004afc:	1814      	adds	r4, r2, r0
 8004afe:	653c      	str	r4, [r7, #80]	; 0x50
 8004b00:	414b      	adcs	r3, r1
 8004b02:	657b      	str	r3, [r7, #84]	; 0x54
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	1891      	adds	r1, r2, r2
 8004b10:	61b9      	str	r1, [r7, #24]
 8004b12:	415b      	adcs	r3, r3
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b1e:	f7fb fbaf 	bl	8000280 <__aeabi_uldivmod>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004b28:	fba3 1302 	umull	r1, r3, r3, r2
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	2164      	movs	r1, #100	; 0x64
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	3332      	adds	r3, #50	; 0x32
 8004b3a:	4a67      	ldr	r2, [pc, #412]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4432      	add	r2, r6
 8004b4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b4e:	e0b9      	b.n	8004cc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	461c      	mov	r4, r3
 8004b54:	f04f 0500 	mov.w	r5, #0
 8004b58:	4622      	mov	r2, r4
 8004b5a:	462b      	mov	r3, r5
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	6139      	str	r1, [r7, #16]
 8004b60:	415b      	adcs	r3, r3
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b68:	1912      	adds	r2, r2, r4
 8004b6a:	eb45 0303 	adc.w	r3, r5, r3
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	00d9      	lsls	r1, r3, #3
 8004b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b7c:	00d0      	lsls	r0, r2, #3
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	eb12 0804 	adds.w	r8, r2, r4
 8004b86:	eb43 0905 	adc.w	r9, r3, r5
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	008b      	lsls	r3, r1, #2
 8004b9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ba2:	0082      	lsls	r2, r0, #2
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	f7fb fb6a 	bl	8000280 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	011e      	lsls	r6, r3, #4
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	1894      	adds	r4, r2, r2
 8004bc8:	60bc      	str	r4, [r7, #8]
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd2:	1812      	adds	r2, r2, r0
 8004bd4:	eb41 0303 	adc.w	r3, r1, r3
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	f04f 0500 	mov.w	r5, #0
 8004be0:	00dd      	lsls	r5, r3, #3
 8004be2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004be6:	00d4      	lsls	r4, r2, #3
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	1814      	adds	r4, r2, r0
 8004bee:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bf0:	414b      	adcs	r3, r1
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	008b      	lsls	r3, r1, #2
 8004c08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c0c:	0082      	lsls	r2, r0, #2
 8004c0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c12:	f7fb fb35 	bl	8000280 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	; 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	3332      	adds	r3, #50	; 0x32
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3a:	441e      	add	r6, r3
 8004c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	1894      	adds	r4, r2, r2
 8004c4a:	603c      	str	r4, [r7, #0]
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c54:	1812      	adds	r2, r2, r0
 8004c56:	eb41 0303 	adc.w	r3, r1, r3
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	f04f 0500 	mov.w	r5, #0
 8004c62:	00dd      	lsls	r5, r3, #3
 8004c64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c68:	00d4      	lsls	r4, r2, #3
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c72:	eb43 0b01 	adc.w	fp, r3, r1
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	008b      	lsls	r3, r1, #2
 8004c8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c8e:	0082      	lsls	r2, r0, #2
 8004c90:	4650      	mov	r0, sl
 8004c92:	4659      	mov	r1, fp
 8004c94:	f7fb faf4 	bl	8000280 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2164      	movs	r1, #100	; 0x64
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a09      	ldr	r2, [pc, #36]	; (8004cd8 <UART_SetConfig+0x38c>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4432      	add	r2, r6
 8004cc2:	609a      	str	r2, [r3, #8]
}
 8004cc4:	bf00      	nop
 8004cc6:	377c      	adds	r7, #124	; 0x7c
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	bf00      	nop
 8004cd0:	40011000 	.word	0x40011000
 8004cd4:	40011400 	.word	0x40011400
 8004cd8:	51eb851f 	.word	0x51eb851f

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	; (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2000000c 	.word	0x2000000c

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f001 f948 	bl	8005f90 <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08006070 	.word	0x08006070
 8004d24:	08006070 	.word	0x08006070
 8004d28:	08006070 	.word	0x08006070
 8004d2c:	08006074 	.word	0x08006074

08004d30 <memcpy>:
 8004d30:	440a      	add	r2, r1
 8004d32:	4291      	cmp	r1, r2
 8004d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d38:	d100      	bne.n	8004d3c <memcpy+0xc>
 8004d3a:	4770      	bx	lr
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d46:	4291      	cmp	r1, r2
 8004d48:	d1f9      	bne.n	8004d3e <memcpy+0xe>
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <memset>:
 8004d4c:	4402      	add	r2, r0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <iprintf>:
 8004d5c:	b40f      	push	{r0, r1, r2, r3}
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <iprintf+0x2c>)
 8004d60:	b513      	push	{r0, r1, r4, lr}
 8004d62:	681c      	ldr	r4, [r3, #0]
 8004d64:	b124      	cbz	r4, 8004d70 <iprintf+0x14>
 8004d66:	69a3      	ldr	r3, [r4, #24]
 8004d68:	b913      	cbnz	r3, 8004d70 <iprintf+0x14>
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 f886 	bl	8004e7c <__sinit>
 8004d70:	ab05      	add	r3, sp, #20
 8004d72:	9a04      	ldr	r2, [sp, #16]
 8004d74:	68a1      	ldr	r1, [r4, #8]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f000 faff 	bl	800537c <_vfiprintf_r>
 8004d7e:	b002      	add	sp, #8
 8004d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d84:	b004      	add	sp, #16
 8004d86:	4770      	bx	lr
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <siprintf>:
 8004d8c:	b40e      	push	{r1, r2, r3}
 8004d8e:	b500      	push	{lr}
 8004d90:	b09c      	sub	sp, #112	; 0x70
 8004d92:	ab1d      	add	r3, sp, #116	; 0x74
 8004d94:	9002      	str	r0, [sp, #8]
 8004d96:	9006      	str	r0, [sp, #24]
 8004d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d9c:	4809      	ldr	r0, [pc, #36]	; (8004dc4 <siprintf+0x38>)
 8004d9e:	9107      	str	r1, [sp, #28]
 8004da0:	9104      	str	r1, [sp, #16]
 8004da2:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <siprintf+0x3c>)
 8004da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da8:	9105      	str	r1, [sp, #20]
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	a902      	add	r1, sp, #8
 8004db0:	f000 f9ba 	bl	8005128 <_svfiprintf_r>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	b01c      	add	sp, #112	; 0x70
 8004dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc0:	b003      	add	sp, #12
 8004dc2:	4770      	bx	lr
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	ffff0208 	.word	0xffff0208

08004dcc <std>:
 8004dcc:	2300      	movs	r3, #0
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8004dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dda:	6083      	str	r3, [r0, #8]
 8004ddc:	8181      	strh	r1, [r0, #12]
 8004dde:	6643      	str	r3, [r0, #100]	; 0x64
 8004de0:	81c2      	strh	r2, [r0, #14]
 8004de2:	6183      	str	r3, [r0, #24]
 8004de4:	4619      	mov	r1, r3
 8004de6:	2208      	movs	r2, #8
 8004de8:	305c      	adds	r0, #92	; 0x5c
 8004dea:	f7ff ffaf 	bl	8004d4c <memset>
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <std+0x38>)
 8004df0:	6263      	str	r3, [r4, #36]	; 0x24
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <std+0x3c>)
 8004df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <std+0x40>)
 8004df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <std+0x44>)
 8004dfc:	6224      	str	r4, [r4, #32]
 8004dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	08005925 	.word	0x08005925
 8004e08:	08005947 	.word	0x08005947
 8004e0c:	0800597f 	.word	0x0800597f
 8004e10:	080059a3 	.word	0x080059a3

08004e14 <_cleanup_r>:
 8004e14:	4901      	ldr	r1, [pc, #4]	; (8004e1c <_cleanup_r+0x8>)
 8004e16:	f000 b8af 	b.w	8004f78 <_fwalk_reent>
 8004e1a:	bf00      	nop
 8004e1c:	08005c7d 	.word	0x08005c7d

08004e20 <__sfmoreglue>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	1e4a      	subs	r2, r1, #1
 8004e24:	2568      	movs	r5, #104	; 0x68
 8004e26:	4355      	muls	r5, r2
 8004e28:	460e      	mov	r6, r1
 8004e2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e2e:	f000 f8c5 	bl	8004fbc <_malloc_r>
 8004e32:	4604      	mov	r4, r0
 8004e34:	b140      	cbz	r0, 8004e48 <__sfmoreglue+0x28>
 8004e36:	2100      	movs	r1, #0
 8004e38:	e9c0 1600 	strd	r1, r6, [r0]
 8004e3c:	300c      	adds	r0, #12
 8004e3e:	60a0      	str	r0, [r4, #8]
 8004e40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e44:	f7ff ff82 	bl	8004d4c <memset>
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}

08004e4c <__sfp_lock_acquire>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sfp_lock_acquire+0x8>)
 8004e4e:	f000 b8b3 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	200001a8 	.word	0x200001a8

08004e58 <__sfp_lock_release>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__sfp_lock_release+0x8>)
 8004e5a:	f000 b8ae 	b.w	8004fba <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	200001a8 	.word	0x200001a8

08004e64 <__sinit_lock_acquire>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__sinit_lock_acquire+0x8>)
 8004e66:	f000 b8a7 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	200001a3 	.word	0x200001a3

08004e70 <__sinit_lock_release>:
 8004e70:	4801      	ldr	r0, [pc, #4]	; (8004e78 <__sinit_lock_release+0x8>)
 8004e72:	f000 b8a2 	b.w	8004fba <__retarget_lock_release_recursive>
 8004e76:	bf00      	nop
 8004e78:	200001a3 	.word	0x200001a3

08004e7c <__sinit>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	f7ff fff0 	bl	8004e64 <__sinit_lock_acquire>
 8004e84:	69a3      	ldr	r3, [r4, #24]
 8004e86:	b11b      	cbz	r3, 8004e90 <__sinit+0x14>
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f7ff bff0 	b.w	8004e70 <__sinit_lock_release>
 8004e90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e94:	6523      	str	r3, [r4, #80]	; 0x50
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <__sinit+0x68>)
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <__sinit+0x6c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	bf04      	itt	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	61a3      	streq	r3, [r4, #24]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f820 	bl	8004eec <__sfp>
 8004eac:	6060      	str	r0, [r4, #4]
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f000 f81c 	bl	8004eec <__sfp>
 8004eb4:	60a0      	str	r0, [r4, #8]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f818 	bl	8004eec <__sfp>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60e0      	str	r0, [r4, #12]
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	6860      	ldr	r0, [r4, #4]
 8004ec4:	f7ff ff82 	bl	8004dcc <std>
 8004ec8:	68a0      	ldr	r0, [r4, #8]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	2109      	movs	r1, #9
 8004ece:	f7ff ff7d 	bl	8004dcc <std>
 8004ed2:	68e0      	ldr	r0, [r4, #12]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	2112      	movs	r1, #18
 8004ed8:	f7ff ff78 	bl	8004dcc <std>
 8004edc:	2301      	movs	r3, #1
 8004ede:	61a3      	str	r3, [r4, #24]
 8004ee0:	e7d2      	b.n	8004e88 <__sinit+0xc>
 8004ee2:	bf00      	nop
 8004ee4:	08005fd0 	.word	0x08005fd0
 8004ee8:	08004e15 	.word	0x08004e15

08004eec <__sfp>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4607      	mov	r7, r0
 8004ef0:	f7ff ffac 	bl	8004e4c <__sfp_lock_acquire>
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <__sfp+0x84>)
 8004ef6:	681e      	ldr	r6, [r3, #0]
 8004ef8:	69b3      	ldr	r3, [r6, #24]
 8004efa:	b913      	cbnz	r3, 8004f02 <__sfp+0x16>
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff ffbd 	bl	8004e7c <__sinit>
 8004f02:	3648      	adds	r6, #72	; 0x48
 8004f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	d503      	bpl.n	8004f14 <__sfp+0x28>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	b30b      	cbz	r3, 8004f54 <__sfp+0x68>
 8004f10:	6836      	ldr	r6, [r6, #0]
 8004f12:	e7f7      	b.n	8004f04 <__sfp+0x18>
 8004f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f18:	b9d5      	cbnz	r5, 8004f50 <__sfp+0x64>
 8004f1a:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <__sfp+0x88>)
 8004f1c:	60e3      	str	r3, [r4, #12]
 8004f1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f22:	6665      	str	r5, [r4, #100]	; 0x64
 8004f24:	f000 f847 	bl	8004fb6 <__retarget_lock_init_recursive>
 8004f28:	f7ff ff96 	bl	8004e58 <__sfp_lock_release>
 8004f2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f34:	6025      	str	r5, [r4, #0]
 8004f36:	61a5      	str	r5, [r4, #24]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f40:	f7ff ff04 	bl	8004d4c <memset>
 8004f44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	3468      	adds	r4, #104	; 0x68
 8004f52:	e7d9      	b.n	8004f08 <__sfp+0x1c>
 8004f54:	2104      	movs	r1, #4
 8004f56:	4638      	mov	r0, r7
 8004f58:	f7ff ff62 	bl	8004e20 <__sfmoreglue>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	6030      	str	r0, [r6, #0]
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1d5      	bne.n	8004f10 <__sfp+0x24>
 8004f64:	f7ff ff78 	bl	8004e58 <__sfp_lock_release>
 8004f68:	230c      	movs	r3, #12
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	e7ee      	b.n	8004f4c <__sfp+0x60>
 8004f6e:	bf00      	nop
 8004f70:	08005fd0 	.word	0x08005fd0
 8004f74:	ffff0001 	.word	0xffff0001

08004f78 <_fwalk_reent>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	4688      	mov	r8, r1
 8004f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f84:	2700      	movs	r7, #0
 8004f86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f8e:	d505      	bpl.n	8004f9c <_fwalk_reent+0x24>
 8004f90:	6824      	ldr	r4, [r4, #0]
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d1f7      	bne.n	8004f86 <_fwalk_reent+0xe>
 8004f96:	4638      	mov	r0, r7
 8004f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9c:	89ab      	ldrh	r3, [r5, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d907      	bls.n	8004fb2 <_fwalk_reent+0x3a>
 8004fa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	d003      	beq.n	8004fb2 <_fwalk_reent+0x3a>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4630      	mov	r0, r6
 8004fae:	47c0      	blx	r8
 8004fb0:	4307      	orrs	r7, r0
 8004fb2:	3568      	adds	r5, #104	; 0x68
 8004fb4:	e7e9      	b.n	8004f8a <_fwalk_reent+0x12>

08004fb6 <__retarget_lock_init_recursive>:
 8004fb6:	4770      	bx	lr

08004fb8 <__retarget_lock_acquire_recursive>:
 8004fb8:	4770      	bx	lr

08004fba <__retarget_lock_release_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <_malloc_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	1ccd      	adds	r5, r1, #3
 8004fc0:	f025 0503 	bic.w	r5, r5, #3
 8004fc4:	3508      	adds	r5, #8
 8004fc6:	2d0c      	cmp	r5, #12
 8004fc8:	bf38      	it	cc
 8004fca:	250c      	movcc	r5, #12
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	4606      	mov	r6, r0
 8004fd0:	db01      	blt.n	8004fd6 <_malloc_r+0x1a>
 8004fd2:	42a9      	cmp	r1, r5
 8004fd4:	d903      	bls.n	8004fde <_malloc_r+0x22>
 8004fd6:	230c      	movs	r3, #12
 8004fd8:	6033      	str	r3, [r6, #0]
 8004fda:	2000      	movs	r0, #0
 8004fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fde:	f000 ff19 	bl	8005e14 <__malloc_lock>
 8004fe2:	4921      	ldr	r1, [pc, #132]	; (8005068 <_malloc_r+0xac>)
 8004fe4:	680a      	ldr	r2, [r1, #0]
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	b99c      	cbnz	r4, 8005012 <_malloc_r+0x56>
 8004fea:	4f20      	ldr	r7, [pc, #128]	; (800506c <_malloc_r+0xb0>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	b923      	cbnz	r3, 8004ffa <_malloc_r+0x3e>
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f000 fc86 	bl	8005904 <_sbrk_r>
 8004ff8:	6038      	str	r0, [r7, #0]
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	f000 fc81 	bl	8005904 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d123      	bne.n	800504e <_malloc_r+0x92>
 8005006:	230c      	movs	r3, #12
 8005008:	6033      	str	r3, [r6, #0]
 800500a:	4630      	mov	r0, r6
 800500c:	f000 ff08 	bl	8005e20 <__malloc_unlock>
 8005010:	e7e3      	b.n	8004fda <_malloc_r+0x1e>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	1b5b      	subs	r3, r3, r5
 8005016:	d417      	bmi.n	8005048 <_malloc_r+0x8c>
 8005018:	2b0b      	cmp	r3, #11
 800501a:	d903      	bls.n	8005024 <_malloc_r+0x68>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	441c      	add	r4, r3
 8005020:	6025      	str	r5, [r4, #0]
 8005022:	e004      	b.n	800502e <_malloc_r+0x72>
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	42a2      	cmp	r2, r4
 8005028:	bf0c      	ite	eq
 800502a:	600b      	streq	r3, [r1, #0]
 800502c:	6053      	strne	r3, [r2, #4]
 800502e:	4630      	mov	r0, r6
 8005030:	f000 fef6 	bl	8005e20 <__malloc_unlock>
 8005034:	f104 000b 	add.w	r0, r4, #11
 8005038:	1d23      	adds	r3, r4, #4
 800503a:	f020 0007 	bic.w	r0, r0, #7
 800503e:	1ac2      	subs	r2, r0, r3
 8005040:	d0cc      	beq.n	8004fdc <_malloc_r+0x20>
 8005042:	1a1b      	subs	r3, r3, r0
 8005044:	50a3      	str	r3, [r4, r2]
 8005046:	e7c9      	b.n	8004fdc <_malloc_r+0x20>
 8005048:	4622      	mov	r2, r4
 800504a:	6864      	ldr	r4, [r4, #4]
 800504c:	e7cc      	b.n	8004fe8 <_malloc_r+0x2c>
 800504e:	1cc4      	adds	r4, r0, #3
 8005050:	f024 0403 	bic.w	r4, r4, #3
 8005054:	42a0      	cmp	r0, r4
 8005056:	d0e3      	beq.n	8005020 <_malloc_r+0x64>
 8005058:	1a21      	subs	r1, r4, r0
 800505a:	4630      	mov	r0, r6
 800505c:	f000 fc52 	bl	8005904 <_sbrk_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d1dd      	bne.n	8005020 <_malloc_r+0x64>
 8005064:	e7cf      	b.n	8005006 <_malloc_r+0x4a>
 8005066:	bf00      	nop
 8005068:	20000090 	.word	0x20000090
 800506c:	20000094 	.word	0x20000094

08005070 <__ssputs_r>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	688e      	ldr	r6, [r1, #8]
 8005076:	429e      	cmp	r6, r3
 8005078:	4682      	mov	sl, r0
 800507a:	460c      	mov	r4, r1
 800507c:	4690      	mov	r8, r2
 800507e:	461f      	mov	r7, r3
 8005080:	d838      	bhi.n	80050f4 <__ssputs_r+0x84>
 8005082:	898a      	ldrh	r2, [r1, #12]
 8005084:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005088:	d032      	beq.n	80050f0 <__ssputs_r+0x80>
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	6909      	ldr	r1, [r1, #16]
 800508e:	eba5 0901 	sub.w	r9, r5, r1
 8005092:	6965      	ldr	r5, [r4, #20]
 8005094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005098:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800509c:	3301      	adds	r3, #1
 800509e:	444b      	add	r3, r9
 80050a0:	106d      	asrs	r5, r5, #1
 80050a2:	429d      	cmp	r5, r3
 80050a4:	bf38      	it	cc
 80050a6:	461d      	movcc	r5, r3
 80050a8:	0553      	lsls	r3, r2, #21
 80050aa:	d531      	bpl.n	8005110 <__ssputs_r+0xa0>
 80050ac:	4629      	mov	r1, r5
 80050ae:	f7ff ff85 	bl	8004fbc <_malloc_r>
 80050b2:	4606      	mov	r6, r0
 80050b4:	b950      	cbnz	r0, 80050cc <__ssputs_r+0x5c>
 80050b6:	230c      	movs	r3, #12
 80050b8:	f8ca 3000 	str.w	r3, [sl]
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	6921      	ldr	r1, [r4, #16]
 80050ce:	464a      	mov	r2, r9
 80050d0:	f7ff fe2e 	bl	8004d30 <memcpy>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	6126      	str	r6, [r4, #16]
 80050e2:	6165      	str	r5, [r4, #20]
 80050e4:	444e      	add	r6, r9
 80050e6:	eba5 0509 	sub.w	r5, r5, r9
 80050ea:	6026      	str	r6, [r4, #0]
 80050ec:	60a5      	str	r5, [r4, #8]
 80050ee:	463e      	mov	r6, r7
 80050f0:	42be      	cmp	r6, r7
 80050f2:	d900      	bls.n	80050f6 <__ssputs_r+0x86>
 80050f4:	463e      	mov	r6, r7
 80050f6:	4632      	mov	r2, r6
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	4641      	mov	r1, r8
 80050fc:	f000 fe70 	bl	8005de0 <memmove>
 8005100:	68a3      	ldr	r3, [r4, #8]
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	1b9b      	subs	r3, r3, r6
 8005106:	4432      	add	r2, r6
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	2000      	movs	r0, #0
 800510e:	e7db      	b.n	80050c8 <__ssputs_r+0x58>
 8005110:	462a      	mov	r2, r5
 8005112:	f000 fedb 	bl	8005ecc <_realloc_r>
 8005116:	4606      	mov	r6, r0
 8005118:	2800      	cmp	r0, #0
 800511a:	d1e1      	bne.n	80050e0 <__ssputs_r+0x70>
 800511c:	6921      	ldr	r1, [r4, #16]
 800511e:	4650      	mov	r0, sl
 8005120:	f000 fe84 	bl	8005e2c <_free_r>
 8005124:	e7c7      	b.n	80050b6 <__ssputs_r+0x46>
	...

08005128 <_svfiprintf_r>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	4698      	mov	r8, r3
 800512e:	898b      	ldrh	r3, [r1, #12]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	b09d      	sub	sp, #116	; 0x74
 8005134:	4607      	mov	r7, r0
 8005136:	460d      	mov	r5, r1
 8005138:	4614      	mov	r4, r2
 800513a:	d50e      	bpl.n	800515a <_svfiprintf_r+0x32>
 800513c:	690b      	ldr	r3, [r1, #16]
 800513e:	b963      	cbnz	r3, 800515a <_svfiprintf_r+0x32>
 8005140:	2140      	movs	r1, #64	; 0x40
 8005142:	f7ff ff3b 	bl	8004fbc <_malloc_r>
 8005146:	6028      	str	r0, [r5, #0]
 8005148:	6128      	str	r0, [r5, #16]
 800514a:	b920      	cbnz	r0, 8005156 <_svfiprintf_r+0x2e>
 800514c:	230c      	movs	r3, #12
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	e0d1      	b.n	80052fa <_svfiprintf_r+0x1d2>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	616b      	str	r3, [r5, #20]
 800515a:	2300      	movs	r3, #0
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	2320      	movs	r3, #32
 8005160:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005164:	f8cd 800c 	str.w	r8, [sp, #12]
 8005168:	2330      	movs	r3, #48	; 0x30
 800516a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005314 <_svfiprintf_r+0x1ec>
 800516e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005172:	f04f 0901 	mov.w	r9, #1
 8005176:	4623      	mov	r3, r4
 8005178:	469a      	mov	sl, r3
 800517a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517e:	b10a      	cbz	r2, 8005184 <_svfiprintf_r+0x5c>
 8005180:	2a25      	cmp	r2, #37	; 0x25
 8005182:	d1f9      	bne.n	8005178 <_svfiprintf_r+0x50>
 8005184:	ebba 0b04 	subs.w	fp, sl, r4
 8005188:	d00b      	beq.n	80051a2 <_svfiprintf_r+0x7a>
 800518a:	465b      	mov	r3, fp
 800518c:	4622      	mov	r2, r4
 800518e:	4629      	mov	r1, r5
 8005190:	4638      	mov	r0, r7
 8005192:	f7ff ff6d 	bl	8005070 <__ssputs_r>
 8005196:	3001      	adds	r0, #1
 8005198:	f000 80aa 	beq.w	80052f0 <_svfiprintf_r+0x1c8>
 800519c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800519e:	445a      	add	r2, fp
 80051a0:	9209      	str	r2, [sp, #36]	; 0x24
 80051a2:	f89a 3000 	ldrb.w	r3, [sl]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80a2 	beq.w	80052f0 <_svfiprintf_r+0x1c8>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295
 80051b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b6:	f10a 0a01 	add.w	sl, sl, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051c2:	931a      	str	r3, [sp, #104]	; 0x68
 80051c4:	4654      	mov	r4, sl
 80051c6:	2205      	movs	r2, #5
 80051c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051cc:	4851      	ldr	r0, [pc, #324]	; (8005314 <_svfiprintf_r+0x1ec>)
 80051ce:	f7fb f807 	bl	80001e0 <memchr>
 80051d2:	9a04      	ldr	r2, [sp, #16]
 80051d4:	b9d8      	cbnz	r0, 800520e <_svfiprintf_r+0xe6>
 80051d6:	06d0      	lsls	r0, r2, #27
 80051d8:	bf44      	itt	mi
 80051da:	2320      	movmi	r3, #32
 80051dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e0:	0711      	lsls	r1, r2, #28
 80051e2:	bf44      	itt	mi
 80051e4:	232b      	movmi	r3, #43	; 0x2b
 80051e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ea:	f89a 3000 	ldrb.w	r3, [sl]
 80051ee:	2b2a      	cmp	r3, #42	; 0x2a
 80051f0:	d015      	beq.n	800521e <_svfiprintf_r+0xf6>
 80051f2:	9a07      	ldr	r2, [sp, #28]
 80051f4:	4654      	mov	r4, sl
 80051f6:	2000      	movs	r0, #0
 80051f8:	f04f 0c0a 	mov.w	ip, #10
 80051fc:	4621      	mov	r1, r4
 80051fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005202:	3b30      	subs	r3, #48	; 0x30
 8005204:	2b09      	cmp	r3, #9
 8005206:	d94e      	bls.n	80052a6 <_svfiprintf_r+0x17e>
 8005208:	b1b0      	cbz	r0, 8005238 <_svfiprintf_r+0x110>
 800520a:	9207      	str	r2, [sp, #28]
 800520c:	e014      	b.n	8005238 <_svfiprintf_r+0x110>
 800520e:	eba0 0308 	sub.w	r3, r0, r8
 8005212:	fa09 f303 	lsl.w	r3, r9, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	46a2      	mov	sl, r4
 800521c:	e7d2      	b.n	80051c4 <_svfiprintf_r+0x9c>
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	9103      	str	r1, [sp, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	bfbb      	ittet	lt
 800522a:	425b      	neglt	r3, r3
 800522c:	f042 0202 	orrlt.w	r2, r2, #2
 8005230:	9307      	strge	r3, [sp, #28]
 8005232:	9307      	strlt	r3, [sp, #28]
 8005234:	bfb8      	it	lt
 8005236:	9204      	strlt	r2, [sp, #16]
 8005238:	7823      	ldrb	r3, [r4, #0]
 800523a:	2b2e      	cmp	r3, #46	; 0x2e
 800523c:	d10c      	bne.n	8005258 <_svfiprintf_r+0x130>
 800523e:	7863      	ldrb	r3, [r4, #1]
 8005240:	2b2a      	cmp	r3, #42	; 0x2a
 8005242:	d135      	bne.n	80052b0 <_svfiprintf_r+0x188>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	1d1a      	adds	r2, r3, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	9203      	str	r2, [sp, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	bfb8      	it	lt
 8005250:	f04f 33ff 	movlt.w	r3, #4294967295
 8005254:	3402      	adds	r4, #2
 8005256:	9305      	str	r3, [sp, #20]
 8005258:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005324 <_svfiprintf_r+0x1fc>
 800525c:	7821      	ldrb	r1, [r4, #0]
 800525e:	2203      	movs	r2, #3
 8005260:	4650      	mov	r0, sl
 8005262:	f7fa ffbd 	bl	80001e0 <memchr>
 8005266:	b140      	cbz	r0, 800527a <_svfiprintf_r+0x152>
 8005268:	2340      	movs	r3, #64	; 0x40
 800526a:	eba0 000a 	sub.w	r0, r0, sl
 800526e:	fa03 f000 	lsl.w	r0, r3, r0
 8005272:	9b04      	ldr	r3, [sp, #16]
 8005274:	4303      	orrs	r3, r0
 8005276:	3401      	adds	r4, #1
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527e:	4826      	ldr	r0, [pc, #152]	; (8005318 <_svfiprintf_r+0x1f0>)
 8005280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005284:	2206      	movs	r2, #6
 8005286:	f7fa ffab 	bl	80001e0 <memchr>
 800528a:	2800      	cmp	r0, #0
 800528c:	d038      	beq.n	8005300 <_svfiprintf_r+0x1d8>
 800528e:	4b23      	ldr	r3, [pc, #140]	; (800531c <_svfiprintf_r+0x1f4>)
 8005290:	bb1b      	cbnz	r3, 80052da <_svfiprintf_r+0x1b2>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	3307      	adds	r3, #7
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	3308      	adds	r3, #8
 800529c:	9303      	str	r3, [sp, #12]
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	4433      	add	r3, r6
 80052a2:	9309      	str	r3, [sp, #36]	; 0x24
 80052a4:	e767      	b.n	8005176 <_svfiprintf_r+0x4e>
 80052a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80052aa:	460c      	mov	r4, r1
 80052ac:	2001      	movs	r0, #1
 80052ae:	e7a5      	b.n	80051fc <_svfiprintf_r+0xd4>
 80052b0:	2300      	movs	r3, #0
 80052b2:	3401      	adds	r4, #1
 80052b4:	9305      	str	r3, [sp, #20]
 80052b6:	4619      	mov	r1, r3
 80052b8:	f04f 0c0a 	mov.w	ip, #10
 80052bc:	4620      	mov	r0, r4
 80052be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c2:	3a30      	subs	r2, #48	; 0x30
 80052c4:	2a09      	cmp	r2, #9
 80052c6:	d903      	bls.n	80052d0 <_svfiprintf_r+0x1a8>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0c5      	beq.n	8005258 <_svfiprintf_r+0x130>
 80052cc:	9105      	str	r1, [sp, #20]
 80052ce:	e7c3      	b.n	8005258 <_svfiprintf_r+0x130>
 80052d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d4:	4604      	mov	r4, r0
 80052d6:	2301      	movs	r3, #1
 80052d8:	e7f0      	b.n	80052bc <_svfiprintf_r+0x194>
 80052da:	ab03      	add	r3, sp, #12
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	462a      	mov	r2, r5
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <_svfiprintf_r+0x1f8>)
 80052e2:	a904      	add	r1, sp, #16
 80052e4:	4638      	mov	r0, r7
 80052e6:	f3af 8000 	nop.w
 80052ea:	1c42      	adds	r2, r0, #1
 80052ec:	4606      	mov	r6, r0
 80052ee:	d1d6      	bne.n	800529e <_svfiprintf_r+0x176>
 80052f0:	89ab      	ldrh	r3, [r5, #12]
 80052f2:	065b      	lsls	r3, r3, #25
 80052f4:	f53f af2c 	bmi.w	8005150 <_svfiprintf_r+0x28>
 80052f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052fa:	b01d      	add	sp, #116	; 0x74
 80052fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	462a      	mov	r2, r5
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <_svfiprintf_r+0x1f8>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	4638      	mov	r0, r7
 800530c:	f000 f9d4 	bl	80056b8 <_printf_i>
 8005310:	e7eb      	b.n	80052ea <_svfiprintf_r+0x1c2>
 8005312:	bf00      	nop
 8005314:	08006034 	.word	0x08006034
 8005318:	0800603e 	.word	0x0800603e
 800531c:	00000000 	.word	0x00000000
 8005320:	08005071 	.word	0x08005071
 8005324:	0800603a 	.word	0x0800603a

08005328 <__sfputc_r>:
 8005328:	6893      	ldr	r3, [r2, #8]
 800532a:	3b01      	subs	r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	b410      	push	{r4}
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	da08      	bge.n	8005346 <__sfputc_r+0x1e>
 8005334:	6994      	ldr	r4, [r2, #24]
 8005336:	42a3      	cmp	r3, r4
 8005338:	db01      	blt.n	800533e <__sfputc_r+0x16>
 800533a:	290a      	cmp	r1, #10
 800533c:	d103      	bne.n	8005346 <__sfputc_r+0x1e>
 800533e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005342:	f000 bb33 	b.w	80059ac <__swbuf_r>
 8005346:	6813      	ldr	r3, [r2, #0]
 8005348:	1c58      	adds	r0, r3, #1
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	7019      	strb	r1, [r3, #0]
 800534e:	4608      	mov	r0, r1
 8005350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005354:	4770      	bx	lr

08005356 <__sfputs_r>:
 8005356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005358:	4606      	mov	r6, r0
 800535a:	460f      	mov	r7, r1
 800535c:	4614      	mov	r4, r2
 800535e:	18d5      	adds	r5, r2, r3
 8005360:	42ac      	cmp	r4, r5
 8005362:	d101      	bne.n	8005368 <__sfputs_r+0x12>
 8005364:	2000      	movs	r0, #0
 8005366:	e007      	b.n	8005378 <__sfputs_r+0x22>
 8005368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800536c:	463a      	mov	r2, r7
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff ffda 	bl	8005328 <__sfputc_r>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d1f3      	bne.n	8005360 <__sfputs_r+0xa>
 8005378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800537c <_vfiprintf_r>:
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	460d      	mov	r5, r1
 8005382:	b09d      	sub	sp, #116	; 0x74
 8005384:	4614      	mov	r4, r2
 8005386:	4698      	mov	r8, r3
 8005388:	4606      	mov	r6, r0
 800538a:	b118      	cbz	r0, 8005394 <_vfiprintf_r+0x18>
 800538c:	6983      	ldr	r3, [r0, #24]
 800538e:	b90b      	cbnz	r3, 8005394 <_vfiprintf_r+0x18>
 8005390:	f7ff fd74 	bl	8004e7c <__sinit>
 8005394:	4b89      	ldr	r3, [pc, #548]	; (80055bc <_vfiprintf_r+0x240>)
 8005396:	429d      	cmp	r5, r3
 8005398:	d11b      	bne.n	80053d2 <_vfiprintf_r+0x56>
 800539a:	6875      	ldr	r5, [r6, #4]
 800539c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800539e:	07d9      	lsls	r1, r3, #31
 80053a0:	d405      	bmi.n	80053ae <_vfiprintf_r+0x32>
 80053a2:	89ab      	ldrh	r3, [r5, #12]
 80053a4:	059a      	lsls	r2, r3, #22
 80053a6:	d402      	bmi.n	80053ae <_vfiprintf_r+0x32>
 80053a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053aa:	f7ff fe05 	bl	8004fb8 <__retarget_lock_acquire_recursive>
 80053ae:	89ab      	ldrh	r3, [r5, #12]
 80053b0:	071b      	lsls	r3, r3, #28
 80053b2:	d501      	bpl.n	80053b8 <_vfiprintf_r+0x3c>
 80053b4:	692b      	ldr	r3, [r5, #16]
 80053b6:	b9eb      	cbnz	r3, 80053f4 <_vfiprintf_r+0x78>
 80053b8:	4629      	mov	r1, r5
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 fb5a 	bl	8005a74 <__swsetup_r>
 80053c0:	b1c0      	cbz	r0, 80053f4 <_vfiprintf_r+0x78>
 80053c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053c4:	07dc      	lsls	r4, r3, #31
 80053c6:	d50e      	bpl.n	80053e6 <_vfiprintf_r+0x6a>
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	b01d      	add	sp, #116	; 0x74
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d2:	4b7b      	ldr	r3, [pc, #492]	; (80055c0 <_vfiprintf_r+0x244>)
 80053d4:	429d      	cmp	r5, r3
 80053d6:	d101      	bne.n	80053dc <_vfiprintf_r+0x60>
 80053d8:	68b5      	ldr	r5, [r6, #8]
 80053da:	e7df      	b.n	800539c <_vfiprintf_r+0x20>
 80053dc:	4b79      	ldr	r3, [pc, #484]	; (80055c4 <_vfiprintf_r+0x248>)
 80053de:	429d      	cmp	r5, r3
 80053e0:	bf08      	it	eq
 80053e2:	68f5      	ldreq	r5, [r6, #12]
 80053e4:	e7da      	b.n	800539c <_vfiprintf_r+0x20>
 80053e6:	89ab      	ldrh	r3, [r5, #12]
 80053e8:	0598      	lsls	r0, r3, #22
 80053ea:	d4ed      	bmi.n	80053c8 <_vfiprintf_r+0x4c>
 80053ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ee:	f7ff fde4 	bl	8004fba <__retarget_lock_release_recursive>
 80053f2:	e7e9      	b.n	80053c8 <_vfiprintf_r+0x4c>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9309      	str	r3, [sp, #36]	; 0x24
 80053f8:	2320      	movs	r3, #32
 80053fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005402:	2330      	movs	r3, #48	; 0x30
 8005404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80055c8 <_vfiprintf_r+0x24c>
 8005408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800540c:	f04f 0901 	mov.w	r9, #1
 8005410:	4623      	mov	r3, r4
 8005412:	469a      	mov	sl, r3
 8005414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005418:	b10a      	cbz	r2, 800541e <_vfiprintf_r+0xa2>
 800541a:	2a25      	cmp	r2, #37	; 0x25
 800541c:	d1f9      	bne.n	8005412 <_vfiprintf_r+0x96>
 800541e:	ebba 0b04 	subs.w	fp, sl, r4
 8005422:	d00b      	beq.n	800543c <_vfiprintf_r+0xc0>
 8005424:	465b      	mov	r3, fp
 8005426:	4622      	mov	r2, r4
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ff93 	bl	8005356 <__sfputs_r>
 8005430:	3001      	adds	r0, #1
 8005432:	f000 80aa 	beq.w	800558a <_vfiprintf_r+0x20e>
 8005436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005438:	445a      	add	r2, fp
 800543a:	9209      	str	r2, [sp, #36]	; 0x24
 800543c:	f89a 3000 	ldrb.w	r3, [sl]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80a2 	beq.w	800558a <_vfiprintf_r+0x20e>
 8005446:	2300      	movs	r3, #0
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005450:	f10a 0a01 	add.w	sl, sl, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800545c:	931a      	str	r3, [sp, #104]	; 0x68
 800545e:	4654      	mov	r4, sl
 8005460:	2205      	movs	r2, #5
 8005462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005466:	4858      	ldr	r0, [pc, #352]	; (80055c8 <_vfiprintf_r+0x24c>)
 8005468:	f7fa feba 	bl	80001e0 <memchr>
 800546c:	9a04      	ldr	r2, [sp, #16]
 800546e:	b9d8      	cbnz	r0, 80054a8 <_vfiprintf_r+0x12c>
 8005470:	06d1      	lsls	r1, r2, #27
 8005472:	bf44      	itt	mi
 8005474:	2320      	movmi	r3, #32
 8005476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800547a:	0713      	lsls	r3, r2, #28
 800547c:	bf44      	itt	mi
 800547e:	232b      	movmi	r3, #43	; 0x2b
 8005480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005484:	f89a 3000 	ldrb.w	r3, [sl]
 8005488:	2b2a      	cmp	r3, #42	; 0x2a
 800548a:	d015      	beq.n	80054b8 <_vfiprintf_r+0x13c>
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	4654      	mov	r4, sl
 8005490:	2000      	movs	r0, #0
 8005492:	f04f 0c0a 	mov.w	ip, #10
 8005496:	4621      	mov	r1, r4
 8005498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549c:	3b30      	subs	r3, #48	; 0x30
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d94e      	bls.n	8005540 <_vfiprintf_r+0x1c4>
 80054a2:	b1b0      	cbz	r0, 80054d2 <_vfiprintf_r+0x156>
 80054a4:	9207      	str	r2, [sp, #28]
 80054a6:	e014      	b.n	80054d2 <_vfiprintf_r+0x156>
 80054a8:	eba0 0308 	sub.w	r3, r0, r8
 80054ac:	fa09 f303 	lsl.w	r3, r9, r3
 80054b0:	4313      	orrs	r3, r2
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	46a2      	mov	sl, r4
 80054b6:	e7d2      	b.n	800545e <_vfiprintf_r+0xe2>
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	9103      	str	r1, [sp, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bfbb      	ittet	lt
 80054c4:	425b      	neglt	r3, r3
 80054c6:	f042 0202 	orrlt.w	r2, r2, #2
 80054ca:	9307      	strge	r3, [sp, #28]
 80054cc:	9307      	strlt	r3, [sp, #28]
 80054ce:	bfb8      	it	lt
 80054d0:	9204      	strlt	r2, [sp, #16]
 80054d2:	7823      	ldrb	r3, [r4, #0]
 80054d4:	2b2e      	cmp	r3, #46	; 0x2e
 80054d6:	d10c      	bne.n	80054f2 <_vfiprintf_r+0x176>
 80054d8:	7863      	ldrb	r3, [r4, #1]
 80054da:	2b2a      	cmp	r3, #42	; 0x2a
 80054dc:	d135      	bne.n	800554a <_vfiprintf_r+0x1ce>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	9203      	str	r2, [sp, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80054ee:	3402      	adds	r4, #2
 80054f0:	9305      	str	r3, [sp, #20]
 80054f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80055d8 <_vfiprintf_r+0x25c>
 80054f6:	7821      	ldrb	r1, [r4, #0]
 80054f8:	2203      	movs	r2, #3
 80054fa:	4650      	mov	r0, sl
 80054fc:	f7fa fe70 	bl	80001e0 <memchr>
 8005500:	b140      	cbz	r0, 8005514 <_vfiprintf_r+0x198>
 8005502:	2340      	movs	r3, #64	; 0x40
 8005504:	eba0 000a 	sub.w	r0, r0, sl
 8005508:	fa03 f000 	lsl.w	r0, r3, r0
 800550c:	9b04      	ldr	r3, [sp, #16]
 800550e:	4303      	orrs	r3, r0
 8005510:	3401      	adds	r4, #1
 8005512:	9304      	str	r3, [sp, #16]
 8005514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005518:	482c      	ldr	r0, [pc, #176]	; (80055cc <_vfiprintf_r+0x250>)
 800551a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800551e:	2206      	movs	r2, #6
 8005520:	f7fa fe5e 	bl	80001e0 <memchr>
 8005524:	2800      	cmp	r0, #0
 8005526:	d03f      	beq.n	80055a8 <_vfiprintf_r+0x22c>
 8005528:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <_vfiprintf_r+0x254>)
 800552a:	bb1b      	cbnz	r3, 8005574 <_vfiprintf_r+0x1f8>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	3307      	adds	r3, #7
 8005530:	f023 0307 	bic.w	r3, r3, #7
 8005534:	3308      	adds	r3, #8
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553a:	443b      	add	r3, r7
 800553c:	9309      	str	r3, [sp, #36]	; 0x24
 800553e:	e767      	b.n	8005410 <_vfiprintf_r+0x94>
 8005540:	fb0c 3202 	mla	r2, ip, r2, r3
 8005544:	460c      	mov	r4, r1
 8005546:	2001      	movs	r0, #1
 8005548:	e7a5      	b.n	8005496 <_vfiprintf_r+0x11a>
 800554a:	2300      	movs	r3, #0
 800554c:	3401      	adds	r4, #1
 800554e:	9305      	str	r3, [sp, #20]
 8005550:	4619      	mov	r1, r3
 8005552:	f04f 0c0a 	mov.w	ip, #10
 8005556:	4620      	mov	r0, r4
 8005558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800555c:	3a30      	subs	r2, #48	; 0x30
 800555e:	2a09      	cmp	r2, #9
 8005560:	d903      	bls.n	800556a <_vfiprintf_r+0x1ee>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0c5      	beq.n	80054f2 <_vfiprintf_r+0x176>
 8005566:	9105      	str	r1, [sp, #20]
 8005568:	e7c3      	b.n	80054f2 <_vfiprintf_r+0x176>
 800556a:	fb0c 2101 	mla	r1, ip, r1, r2
 800556e:	4604      	mov	r4, r0
 8005570:	2301      	movs	r3, #1
 8005572:	e7f0      	b.n	8005556 <_vfiprintf_r+0x1da>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <_vfiprintf_r+0x258>)
 800557c:	a904      	add	r1, sp, #16
 800557e:	4630      	mov	r0, r6
 8005580:	f3af 8000 	nop.w
 8005584:	4607      	mov	r7, r0
 8005586:	1c78      	adds	r0, r7, #1
 8005588:	d1d6      	bne.n	8005538 <_vfiprintf_r+0x1bc>
 800558a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800558c:	07d9      	lsls	r1, r3, #31
 800558e:	d405      	bmi.n	800559c <_vfiprintf_r+0x220>
 8005590:	89ab      	ldrh	r3, [r5, #12]
 8005592:	059a      	lsls	r2, r3, #22
 8005594:	d402      	bmi.n	800559c <_vfiprintf_r+0x220>
 8005596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005598:	f7ff fd0f 	bl	8004fba <__retarget_lock_release_recursive>
 800559c:	89ab      	ldrh	r3, [r5, #12]
 800559e:	065b      	lsls	r3, r3, #25
 80055a0:	f53f af12 	bmi.w	80053c8 <_vfiprintf_r+0x4c>
 80055a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055a6:	e711      	b.n	80053cc <_vfiprintf_r+0x50>
 80055a8:	ab03      	add	r3, sp, #12
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	462a      	mov	r2, r5
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <_vfiprintf_r+0x258>)
 80055b0:	a904      	add	r1, sp, #16
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 f880 	bl	80056b8 <_printf_i>
 80055b8:	e7e4      	b.n	8005584 <_vfiprintf_r+0x208>
 80055ba:	bf00      	nop
 80055bc:	08005ff4 	.word	0x08005ff4
 80055c0:	08006014 	.word	0x08006014
 80055c4:	08005fd4 	.word	0x08005fd4
 80055c8:	08006034 	.word	0x08006034
 80055cc:	0800603e 	.word	0x0800603e
 80055d0:	00000000 	.word	0x00000000
 80055d4:	08005357 	.word	0x08005357
 80055d8:	0800603a 	.word	0x0800603a

080055dc <_printf_common>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	4616      	mov	r6, r2
 80055e2:	4699      	mov	r9, r3
 80055e4:	688a      	ldr	r2, [r1, #8]
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	bfb8      	it	lt
 80055f0:	4613      	movlt	r3, r2
 80055f2:	6033      	str	r3, [r6, #0]
 80055f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f8:	4607      	mov	r7, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	b10a      	cbz	r2, 8005602 <_printf_common+0x26>
 80055fe:	3301      	adds	r3, #1
 8005600:	6033      	str	r3, [r6, #0]
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	0699      	lsls	r1, r3, #26
 8005606:	bf42      	ittt	mi
 8005608:	6833      	ldrmi	r3, [r6, #0]
 800560a:	3302      	addmi	r3, #2
 800560c:	6033      	strmi	r3, [r6, #0]
 800560e:	6825      	ldr	r5, [r4, #0]
 8005610:	f015 0506 	ands.w	r5, r5, #6
 8005614:	d106      	bne.n	8005624 <_printf_common+0x48>
 8005616:	f104 0a19 	add.w	sl, r4, #25
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	6832      	ldr	r2, [r6, #0]
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	42ab      	cmp	r3, r5
 8005622:	dc26      	bgt.n	8005672 <_printf_common+0x96>
 8005624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005628:	1e13      	subs	r3, r2, #0
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	bf18      	it	ne
 800562e:	2301      	movne	r3, #1
 8005630:	0692      	lsls	r2, r2, #26
 8005632:	d42b      	bmi.n	800568c <_printf_common+0xb0>
 8005634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005638:	4649      	mov	r1, r9
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	3001      	adds	r0, #1
 8005640:	d01e      	beq.n	8005680 <_printf_common+0xa4>
 8005642:	6823      	ldr	r3, [r4, #0]
 8005644:	68e5      	ldr	r5, [r4, #12]
 8005646:	6832      	ldr	r2, [r6, #0]
 8005648:	f003 0306 	and.w	r3, r3, #6
 800564c:	2b04      	cmp	r3, #4
 800564e:	bf08      	it	eq
 8005650:	1aad      	subeq	r5, r5, r2
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	6922      	ldr	r2, [r4, #16]
 8005656:	bf0c      	ite	eq
 8005658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800565c:	2500      	movne	r5, #0
 800565e:	4293      	cmp	r3, r2
 8005660:	bfc4      	itt	gt
 8005662:	1a9b      	subgt	r3, r3, r2
 8005664:	18ed      	addgt	r5, r5, r3
 8005666:	2600      	movs	r6, #0
 8005668:	341a      	adds	r4, #26
 800566a:	42b5      	cmp	r5, r6
 800566c:	d11a      	bne.n	80056a4 <_printf_common+0xc8>
 800566e:	2000      	movs	r0, #0
 8005670:	e008      	b.n	8005684 <_printf_common+0xa8>
 8005672:	2301      	movs	r3, #1
 8005674:	4652      	mov	r2, sl
 8005676:	4649      	mov	r1, r9
 8005678:	4638      	mov	r0, r7
 800567a:	47c0      	blx	r8
 800567c:	3001      	adds	r0, #1
 800567e:	d103      	bne.n	8005688 <_printf_common+0xac>
 8005680:	f04f 30ff 	mov.w	r0, #4294967295
 8005684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005688:	3501      	adds	r5, #1
 800568a:	e7c6      	b.n	800561a <_printf_common+0x3e>
 800568c:	18e1      	adds	r1, r4, r3
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	2030      	movs	r0, #48	; 0x30
 8005692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005696:	4422      	add	r2, r4
 8005698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800569c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a0:	3302      	adds	r3, #2
 80056a2:	e7c7      	b.n	8005634 <_printf_common+0x58>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4622      	mov	r2, r4
 80056a8:	4649      	mov	r1, r9
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	3001      	adds	r0, #1
 80056b0:	d0e6      	beq.n	8005680 <_printf_common+0xa4>
 80056b2:	3601      	adds	r6, #1
 80056b4:	e7d9      	b.n	800566a <_printf_common+0x8e>
	...

080056b8 <_printf_i>:
 80056b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056bc:	460c      	mov	r4, r1
 80056be:	4691      	mov	r9, r2
 80056c0:	7e27      	ldrb	r7, [r4, #24]
 80056c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056c4:	2f78      	cmp	r7, #120	; 0x78
 80056c6:	4680      	mov	r8, r0
 80056c8:	469a      	mov	sl, r3
 80056ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ce:	d807      	bhi.n	80056e0 <_printf_i+0x28>
 80056d0:	2f62      	cmp	r7, #98	; 0x62
 80056d2:	d80a      	bhi.n	80056ea <_printf_i+0x32>
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	f000 80d8 	beq.w	800588a <_printf_i+0x1d2>
 80056da:	2f58      	cmp	r7, #88	; 0x58
 80056dc:	f000 80a3 	beq.w	8005826 <_printf_i+0x16e>
 80056e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056e8:	e03a      	b.n	8005760 <_printf_i+0xa8>
 80056ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ee:	2b15      	cmp	r3, #21
 80056f0:	d8f6      	bhi.n	80056e0 <_printf_i+0x28>
 80056f2:	a001      	add	r0, pc, #4	; (adr r0, 80056f8 <_printf_i+0x40>)
 80056f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005765 	.word	0x08005765
 8005700:	080056e1 	.word	0x080056e1
 8005704:	080056e1 	.word	0x080056e1
 8005708:	080056e1 	.word	0x080056e1
 800570c:	080056e1 	.word	0x080056e1
 8005710:	08005765 	.word	0x08005765
 8005714:	080056e1 	.word	0x080056e1
 8005718:	080056e1 	.word	0x080056e1
 800571c:	080056e1 	.word	0x080056e1
 8005720:	080056e1 	.word	0x080056e1
 8005724:	08005871 	.word	0x08005871
 8005728:	08005795 	.word	0x08005795
 800572c:	08005853 	.word	0x08005853
 8005730:	080056e1 	.word	0x080056e1
 8005734:	080056e1 	.word	0x080056e1
 8005738:	08005893 	.word	0x08005893
 800573c:	080056e1 	.word	0x080056e1
 8005740:	08005795 	.word	0x08005795
 8005744:	080056e1 	.word	0x080056e1
 8005748:	080056e1 	.word	0x080056e1
 800574c:	0800585b 	.word	0x0800585b
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	600a      	str	r2, [r1, #0]
 8005758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800575c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005760:	2301      	movs	r3, #1
 8005762:	e0a3      	b.n	80058ac <_printf_i+0x1f4>
 8005764:	6825      	ldr	r5, [r4, #0]
 8005766:	6808      	ldr	r0, [r1, #0]
 8005768:	062e      	lsls	r6, r5, #24
 800576a:	f100 0304 	add.w	r3, r0, #4
 800576e:	d50a      	bpl.n	8005786 <_printf_i+0xce>
 8005770:	6805      	ldr	r5, [r0, #0]
 8005772:	600b      	str	r3, [r1, #0]
 8005774:	2d00      	cmp	r5, #0
 8005776:	da03      	bge.n	8005780 <_printf_i+0xc8>
 8005778:	232d      	movs	r3, #45	; 0x2d
 800577a:	426d      	negs	r5, r5
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005780:	485e      	ldr	r0, [pc, #376]	; (80058fc <_printf_i+0x244>)
 8005782:	230a      	movs	r3, #10
 8005784:	e019      	b.n	80057ba <_printf_i+0x102>
 8005786:	f015 0f40 	tst.w	r5, #64	; 0x40
 800578a:	6805      	ldr	r5, [r0, #0]
 800578c:	600b      	str	r3, [r1, #0]
 800578e:	bf18      	it	ne
 8005790:	b22d      	sxthne	r5, r5
 8005792:	e7ef      	b.n	8005774 <_printf_i+0xbc>
 8005794:	680b      	ldr	r3, [r1, #0]
 8005796:	6825      	ldr	r5, [r4, #0]
 8005798:	1d18      	adds	r0, r3, #4
 800579a:	6008      	str	r0, [r1, #0]
 800579c:	0628      	lsls	r0, r5, #24
 800579e:	d501      	bpl.n	80057a4 <_printf_i+0xec>
 80057a0:	681d      	ldr	r5, [r3, #0]
 80057a2:	e002      	b.n	80057aa <_printf_i+0xf2>
 80057a4:	0669      	lsls	r1, r5, #25
 80057a6:	d5fb      	bpl.n	80057a0 <_printf_i+0xe8>
 80057a8:	881d      	ldrh	r5, [r3, #0]
 80057aa:	4854      	ldr	r0, [pc, #336]	; (80058fc <_printf_i+0x244>)
 80057ac:	2f6f      	cmp	r7, #111	; 0x6f
 80057ae:	bf0c      	ite	eq
 80057b0:	2308      	moveq	r3, #8
 80057b2:	230a      	movne	r3, #10
 80057b4:	2100      	movs	r1, #0
 80057b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ba:	6866      	ldr	r6, [r4, #4]
 80057bc:	60a6      	str	r6, [r4, #8]
 80057be:	2e00      	cmp	r6, #0
 80057c0:	bfa2      	ittt	ge
 80057c2:	6821      	ldrge	r1, [r4, #0]
 80057c4:	f021 0104 	bicge.w	r1, r1, #4
 80057c8:	6021      	strge	r1, [r4, #0]
 80057ca:	b90d      	cbnz	r5, 80057d0 <_printf_i+0x118>
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	d04d      	beq.n	800586c <_printf_i+0x1b4>
 80057d0:	4616      	mov	r6, r2
 80057d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057d6:	fb03 5711 	mls	r7, r3, r1, r5
 80057da:	5dc7      	ldrb	r7, [r0, r7]
 80057dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057e0:	462f      	mov	r7, r5
 80057e2:	42bb      	cmp	r3, r7
 80057e4:	460d      	mov	r5, r1
 80057e6:	d9f4      	bls.n	80057d2 <_printf_i+0x11a>
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d10b      	bne.n	8005804 <_printf_i+0x14c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	07df      	lsls	r7, r3, #31
 80057f0:	d508      	bpl.n	8005804 <_printf_i+0x14c>
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	6861      	ldr	r1, [r4, #4]
 80057f6:	4299      	cmp	r1, r3
 80057f8:	bfde      	ittt	le
 80057fa:	2330      	movle	r3, #48	; 0x30
 80057fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005800:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005804:	1b92      	subs	r2, r2, r6
 8005806:	6122      	str	r2, [r4, #16]
 8005808:	f8cd a000 	str.w	sl, [sp]
 800580c:	464b      	mov	r3, r9
 800580e:	aa03      	add	r2, sp, #12
 8005810:	4621      	mov	r1, r4
 8005812:	4640      	mov	r0, r8
 8005814:	f7ff fee2 	bl	80055dc <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	d14c      	bne.n	80058b6 <_printf_i+0x1fe>
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	b004      	add	sp, #16
 8005822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005826:	4835      	ldr	r0, [pc, #212]	; (80058fc <_printf_i+0x244>)
 8005828:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	680e      	ldr	r6, [r1, #0]
 8005830:	061f      	lsls	r7, r3, #24
 8005832:	f856 5b04 	ldr.w	r5, [r6], #4
 8005836:	600e      	str	r6, [r1, #0]
 8005838:	d514      	bpl.n	8005864 <_printf_i+0x1ac>
 800583a:	07d9      	lsls	r1, r3, #31
 800583c:	bf44      	itt	mi
 800583e:	f043 0320 	orrmi.w	r3, r3, #32
 8005842:	6023      	strmi	r3, [r4, #0]
 8005844:	b91d      	cbnz	r5, 800584e <_printf_i+0x196>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f023 0320 	bic.w	r3, r3, #32
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	2310      	movs	r3, #16
 8005850:	e7b0      	b.n	80057b4 <_printf_i+0xfc>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	f043 0320 	orr.w	r3, r3, #32
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	2378      	movs	r3, #120	; 0x78
 800585c:	4828      	ldr	r0, [pc, #160]	; (8005900 <_printf_i+0x248>)
 800585e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005862:	e7e3      	b.n	800582c <_printf_i+0x174>
 8005864:	065e      	lsls	r6, r3, #25
 8005866:	bf48      	it	mi
 8005868:	b2ad      	uxthmi	r5, r5
 800586a:	e7e6      	b.n	800583a <_printf_i+0x182>
 800586c:	4616      	mov	r6, r2
 800586e:	e7bb      	b.n	80057e8 <_printf_i+0x130>
 8005870:	680b      	ldr	r3, [r1, #0]
 8005872:	6826      	ldr	r6, [r4, #0]
 8005874:	6960      	ldr	r0, [r4, #20]
 8005876:	1d1d      	adds	r5, r3, #4
 8005878:	600d      	str	r5, [r1, #0]
 800587a:	0635      	lsls	r5, r6, #24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	d501      	bpl.n	8005884 <_printf_i+0x1cc>
 8005880:	6018      	str	r0, [r3, #0]
 8005882:	e002      	b.n	800588a <_printf_i+0x1d2>
 8005884:	0671      	lsls	r1, r6, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0x1c8>
 8005888:	8018      	strh	r0, [r3, #0]
 800588a:	2300      	movs	r3, #0
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	4616      	mov	r6, r2
 8005890:	e7ba      	b.n	8005808 <_printf_i+0x150>
 8005892:	680b      	ldr	r3, [r1, #0]
 8005894:	1d1a      	adds	r2, r3, #4
 8005896:	600a      	str	r2, [r1, #0]
 8005898:	681e      	ldr	r6, [r3, #0]
 800589a:	6862      	ldr	r2, [r4, #4]
 800589c:	2100      	movs	r1, #0
 800589e:	4630      	mov	r0, r6
 80058a0:	f7fa fc9e 	bl	80001e0 <memchr>
 80058a4:	b108      	cbz	r0, 80058aa <_printf_i+0x1f2>
 80058a6:	1b80      	subs	r0, r0, r6
 80058a8:	6060      	str	r0, [r4, #4]
 80058aa:	6863      	ldr	r3, [r4, #4]
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	2300      	movs	r3, #0
 80058b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b4:	e7a8      	b.n	8005808 <_printf_i+0x150>
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	4632      	mov	r2, r6
 80058ba:	4649      	mov	r1, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	47d0      	blx	sl
 80058c0:	3001      	adds	r0, #1
 80058c2:	d0ab      	beq.n	800581c <_printf_i+0x164>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	079b      	lsls	r3, r3, #30
 80058c8:	d413      	bmi.n	80058f2 <_printf_i+0x23a>
 80058ca:	68e0      	ldr	r0, [r4, #12]
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	4298      	cmp	r0, r3
 80058d0:	bfb8      	it	lt
 80058d2:	4618      	movlt	r0, r3
 80058d4:	e7a4      	b.n	8005820 <_printf_i+0x168>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4632      	mov	r2, r6
 80058da:	4649      	mov	r1, r9
 80058dc:	4640      	mov	r0, r8
 80058de:	47d0      	blx	sl
 80058e0:	3001      	adds	r0, #1
 80058e2:	d09b      	beq.n	800581c <_printf_i+0x164>
 80058e4:	3501      	adds	r5, #1
 80058e6:	68e3      	ldr	r3, [r4, #12]
 80058e8:	9903      	ldr	r1, [sp, #12]
 80058ea:	1a5b      	subs	r3, r3, r1
 80058ec:	42ab      	cmp	r3, r5
 80058ee:	dcf2      	bgt.n	80058d6 <_printf_i+0x21e>
 80058f0:	e7eb      	b.n	80058ca <_printf_i+0x212>
 80058f2:	2500      	movs	r5, #0
 80058f4:	f104 0619 	add.w	r6, r4, #25
 80058f8:	e7f5      	b.n	80058e6 <_printf_i+0x22e>
 80058fa:	bf00      	nop
 80058fc:	08006045 	.word	0x08006045
 8005900:	08006056 	.word	0x08006056

08005904 <_sbrk_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d06      	ldr	r5, [pc, #24]	; (8005920 <_sbrk_r+0x1c>)
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	4608      	mov	r0, r1
 800590e:	602b      	str	r3, [r5, #0]
 8005910:	f7fb fad8 	bl	8000ec4 <_sbrk>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d102      	bne.n	800591e <_sbrk_r+0x1a>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	b103      	cbz	r3, 800591e <_sbrk_r+0x1a>
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200001ac 	.word	0x200001ac

08005924 <__sread>:
 8005924:	b510      	push	{r4, lr}
 8005926:	460c      	mov	r4, r1
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 faf4 	bl	8005f18 <_read_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	bfab      	itete	ge
 8005934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005936:	89a3      	ldrhlt	r3, [r4, #12]
 8005938:	181b      	addge	r3, r3, r0
 800593a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800593e:	bfac      	ite	ge
 8005940:	6563      	strge	r3, [r4, #84]	; 0x54
 8005942:	81a3      	strhlt	r3, [r4, #12]
 8005944:	bd10      	pop	{r4, pc}

08005946 <__swrite>:
 8005946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	461f      	mov	r7, r3
 800594c:	898b      	ldrh	r3, [r1, #12]
 800594e:	05db      	lsls	r3, r3, #23
 8005950:	4605      	mov	r5, r0
 8005952:	460c      	mov	r4, r1
 8005954:	4616      	mov	r6, r2
 8005956:	d505      	bpl.n	8005964 <__swrite+0x1e>
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	2302      	movs	r3, #2
 800595e:	2200      	movs	r2, #0
 8005960:	f000 f9c8 	bl	8005cf4 <_lseek_r>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800596a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596e:	81a3      	strh	r3, [r4, #12]
 8005970:	4632      	mov	r2, r6
 8005972:	463b      	mov	r3, r7
 8005974:	4628      	mov	r0, r5
 8005976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	f000 b869 	b.w	8005a50 <_write_r>

0800597e <__sseek>:
 800597e:	b510      	push	{r4, lr}
 8005980:	460c      	mov	r4, r1
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 f9b5 	bl	8005cf4 <_lseek_r>
 800598a:	1c43      	adds	r3, r0, #1
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	bf15      	itete	ne
 8005990:	6560      	strne	r0, [r4, #84]	; 0x54
 8005992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800599a:	81a3      	strheq	r3, [r4, #12]
 800599c:	bf18      	it	ne
 800599e:	81a3      	strhne	r3, [r4, #12]
 80059a0:	bd10      	pop	{r4, pc}

080059a2 <__sclose>:
 80059a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a6:	f000 b8d3 	b.w	8005b50 <_close_r>
	...

080059ac <__swbuf_r>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	460e      	mov	r6, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	4605      	mov	r5, r0
 80059b4:	b118      	cbz	r0, 80059be <__swbuf_r+0x12>
 80059b6:	6983      	ldr	r3, [r0, #24]
 80059b8:	b90b      	cbnz	r3, 80059be <__swbuf_r+0x12>
 80059ba:	f7ff fa5f 	bl	8004e7c <__sinit>
 80059be:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <__swbuf_r+0x98>)
 80059c0:	429c      	cmp	r4, r3
 80059c2:	d12b      	bne.n	8005a1c <__swbuf_r+0x70>
 80059c4:	686c      	ldr	r4, [r5, #4]
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d52f      	bpl.n	8005a30 <__swbuf_r+0x84>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b36b      	cbz	r3, 8005a30 <__swbuf_r+0x84>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1ac0      	subs	r0, r0, r3
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	b2f6      	uxtb	r6, r6
 80059de:	4283      	cmp	r3, r0
 80059e0:	4637      	mov	r7, r6
 80059e2:	dc04      	bgt.n	80059ee <__swbuf_r+0x42>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 f948 	bl	8005c7c <_fflush_r>
 80059ec:	bb30      	cbnz	r0, 8005a3c <__swbuf_r+0x90>
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	701e      	strb	r6, [r3, #0]
 80059fc:	6963      	ldr	r3, [r4, #20]
 80059fe:	3001      	adds	r0, #1
 8005a00:	4283      	cmp	r3, r0
 8005a02:	d004      	beq.n	8005a0e <__swbuf_r+0x62>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	07db      	lsls	r3, r3, #31
 8005a08:	d506      	bpl.n	8005a18 <__swbuf_r+0x6c>
 8005a0a:	2e0a      	cmp	r6, #10
 8005a0c:	d104      	bne.n	8005a18 <__swbuf_r+0x6c>
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4628      	mov	r0, r5
 8005a12:	f000 f933 	bl	8005c7c <_fflush_r>
 8005a16:	b988      	cbnz	r0, 8005a3c <__swbuf_r+0x90>
 8005a18:	4638      	mov	r0, r7
 8005a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <__swbuf_r+0x9c>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <__swbuf_r+0x7a>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7cf      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <__swbuf_r+0xa0>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7ca      	b.n	80059c6 <__swbuf_r+0x1a>
 8005a30:	4621      	mov	r1, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 f81e 	bl	8005a74 <__swsetup_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d0cb      	beq.n	80059d4 <__swbuf_r+0x28>
 8005a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a40:	e7ea      	b.n	8005a18 <__swbuf_r+0x6c>
 8005a42:	bf00      	nop
 8005a44:	08005ff4 	.word	0x08005ff4
 8005a48:	08006014 	.word	0x08006014
 8005a4c:	08005fd4 	.word	0x08005fd4

08005a50 <_write_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4d07      	ldr	r5, [pc, #28]	; (8005a70 <_write_r+0x20>)
 8005a54:	4604      	mov	r4, r0
 8005a56:	4608      	mov	r0, r1
 8005a58:	4611      	mov	r1, r2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	602a      	str	r2, [r5, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f7fb f9df 	bl	8000e22 <_write>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d102      	bne.n	8005a6e <_write_r+0x1e>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	b103      	cbz	r3, 8005a6e <_write_r+0x1e>
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	200001ac 	.word	0x200001ac

08005a74 <__swsetup_r>:
 8005a74:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <__swsetup_r+0xcc>)
 8005a76:	b570      	push	{r4, r5, r6, lr}
 8005a78:	681d      	ldr	r5, [r3, #0]
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	b125      	cbz	r5, 8005a8a <__swsetup_r+0x16>
 8005a80:	69ab      	ldr	r3, [r5, #24]
 8005a82:	b913      	cbnz	r3, 8005a8a <__swsetup_r+0x16>
 8005a84:	4628      	mov	r0, r5
 8005a86:	f7ff f9f9 	bl	8004e7c <__sinit>
 8005a8a:	4b2e      	ldr	r3, [pc, #184]	; (8005b44 <__swsetup_r+0xd0>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	d10f      	bne.n	8005ab0 <__swsetup_r+0x3c>
 8005a90:	686c      	ldr	r4, [r5, #4]
 8005a92:	89a3      	ldrh	r3, [r4, #12]
 8005a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a98:	0719      	lsls	r1, r3, #28
 8005a9a:	d42c      	bmi.n	8005af6 <__swsetup_r+0x82>
 8005a9c:	06dd      	lsls	r5, r3, #27
 8005a9e:	d411      	bmi.n	8005ac4 <__swsetup_r+0x50>
 8005aa0:	2309      	movs	r3, #9
 8005aa2:	6033      	str	r3, [r6, #0]
 8005aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005aae:	e03e      	b.n	8005b2e <__swsetup_r+0xba>
 8005ab0:	4b25      	ldr	r3, [pc, #148]	; (8005b48 <__swsetup_r+0xd4>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d101      	bne.n	8005aba <__swsetup_r+0x46>
 8005ab6:	68ac      	ldr	r4, [r5, #8]
 8005ab8:	e7eb      	b.n	8005a92 <__swsetup_r+0x1e>
 8005aba:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <__swsetup_r+0xd8>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	bf08      	it	eq
 8005ac0:	68ec      	ldreq	r4, [r5, #12]
 8005ac2:	e7e6      	b.n	8005a92 <__swsetup_r+0x1e>
 8005ac4:	0758      	lsls	r0, r3, #29
 8005ac6:	d512      	bpl.n	8005aee <__swsetup_r+0x7a>
 8005ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aca:	b141      	cbz	r1, 8005ade <__swsetup_r+0x6a>
 8005acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	d002      	beq.n	8005ada <__swsetup_r+0x66>
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 f9a9 	bl	8005e2c <_free_r>
 8005ada:	2300      	movs	r3, #0
 8005adc:	6363      	str	r3, [r4, #52]	; 0x34
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f043 0308 	orr.w	r3, r3, #8
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	b94b      	cbnz	r3, 8005b0e <__swsetup_r+0x9a>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b04:	d003      	beq.n	8005b0e <__swsetup_r+0x9a>
 8005b06:	4621      	mov	r1, r4
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f929 	bl	8005d60 <__smakebuf_r>
 8005b0e:	89a0      	ldrh	r0, [r4, #12]
 8005b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b14:	f010 0301 	ands.w	r3, r0, #1
 8005b18:	d00a      	beq.n	8005b30 <__swsetup_r+0xbc>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	6963      	ldr	r3, [r4, #20]
 8005b20:	425b      	negs	r3, r3
 8005b22:	61a3      	str	r3, [r4, #24]
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	b943      	cbnz	r3, 8005b3a <__swsetup_r+0xc6>
 8005b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b2c:	d1ba      	bne.n	8005aa4 <__swsetup_r+0x30>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	0781      	lsls	r1, r0, #30
 8005b32:	bf58      	it	pl
 8005b34:	6963      	ldrpl	r3, [r4, #20]
 8005b36:	60a3      	str	r3, [r4, #8]
 8005b38:	e7f4      	b.n	8005b24 <__swsetup_r+0xb0>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e7f7      	b.n	8005b2e <__swsetup_r+0xba>
 8005b3e:	bf00      	nop
 8005b40:	2000000c 	.word	0x2000000c
 8005b44:	08005ff4 	.word	0x08005ff4
 8005b48:	08006014 	.word	0x08006014
 8005b4c:	08005fd4 	.word	0x08005fd4

08005b50 <_close_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	; (8005b6c <_close_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fb f97d 	bl	8000e5a <_close>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_close_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_close_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200001ac 	.word	0x200001ac

08005b70 <__sflush_r>:
 8005b70:	898a      	ldrh	r2, [r1, #12]
 8005b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	0710      	lsls	r0, r2, #28
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	d458      	bmi.n	8005c30 <__sflush_r+0xc0>
 8005b7e:	684b      	ldr	r3, [r1, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc05      	bgt.n	8005b90 <__sflush_r+0x20>
 8005b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dc02      	bgt.n	8005b90 <__sflush_r+0x20>
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	d0f9      	beq.n	8005b8a <__sflush_r+0x1a>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b9c:	682f      	ldr	r7, [r5, #0]
 8005b9e:	602b      	str	r3, [r5, #0]
 8005ba0:	d032      	beq.n	8005c08 <__sflush_r+0x98>
 8005ba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	075a      	lsls	r2, r3, #29
 8005ba8:	d505      	bpl.n	8005bb6 <__sflush_r+0x46>
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	1ac0      	subs	r0, r0, r3
 8005bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bb0:	b10b      	cbz	r3, 8005bb6 <__sflush_r+0x46>
 8005bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bb4:	1ac0      	subs	r0, r0, r3
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bbc:	6a21      	ldr	r1, [r4, #32]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	47b0      	blx	r6
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	d106      	bne.n	8005bd6 <__sflush_r+0x66>
 8005bc8:	6829      	ldr	r1, [r5, #0]
 8005bca:	291d      	cmp	r1, #29
 8005bcc:	d82c      	bhi.n	8005c28 <__sflush_r+0xb8>
 8005bce:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <__sflush_r+0x108>)
 8005bd0:	40ca      	lsrs	r2, r1
 8005bd2:	07d6      	lsls	r6, r2, #31
 8005bd4:	d528      	bpl.n	8005c28 <__sflush_r+0xb8>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	6062      	str	r2, [r4, #4]
 8005bda:	04d9      	lsls	r1, r3, #19
 8005bdc:	6922      	ldr	r2, [r4, #16]
 8005bde:	6022      	str	r2, [r4, #0]
 8005be0:	d504      	bpl.n	8005bec <__sflush_r+0x7c>
 8005be2:	1c42      	adds	r2, r0, #1
 8005be4:	d101      	bne.n	8005bea <__sflush_r+0x7a>
 8005be6:	682b      	ldr	r3, [r5, #0]
 8005be8:	b903      	cbnz	r3, 8005bec <__sflush_r+0x7c>
 8005bea:	6560      	str	r0, [r4, #84]	; 0x54
 8005bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bee:	602f      	str	r7, [r5, #0]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	d0ca      	beq.n	8005b8a <__sflush_r+0x1a>
 8005bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d002      	beq.n	8005c02 <__sflush_r+0x92>
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 f915 	bl	8005e2c <_free_r>
 8005c02:	2000      	movs	r0, #0
 8005c04:	6360      	str	r0, [r4, #52]	; 0x34
 8005c06:	e7c1      	b.n	8005b8c <__sflush_r+0x1c>
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b0      	blx	r6
 8005c10:	1c41      	adds	r1, r0, #1
 8005c12:	d1c7      	bne.n	8005ba4 <__sflush_r+0x34>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0c4      	beq.n	8005ba4 <__sflush_r+0x34>
 8005c1a:	2b1d      	cmp	r3, #29
 8005c1c:	d001      	beq.n	8005c22 <__sflush_r+0xb2>
 8005c1e:	2b16      	cmp	r3, #22
 8005c20:	d101      	bne.n	8005c26 <__sflush_r+0xb6>
 8005c22:	602f      	str	r7, [r5, #0]
 8005c24:	e7b1      	b.n	8005b8a <__sflush_r+0x1a>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2c:	81a3      	strh	r3, [r4, #12]
 8005c2e:	e7ad      	b.n	8005b8c <__sflush_r+0x1c>
 8005c30:	690f      	ldr	r7, [r1, #16]
 8005c32:	2f00      	cmp	r7, #0
 8005c34:	d0a9      	beq.n	8005b8a <__sflush_r+0x1a>
 8005c36:	0793      	lsls	r3, r2, #30
 8005c38:	680e      	ldr	r6, [r1, #0]
 8005c3a:	bf08      	it	eq
 8005c3c:	694b      	ldreq	r3, [r1, #20]
 8005c3e:	600f      	str	r7, [r1, #0]
 8005c40:	bf18      	it	ne
 8005c42:	2300      	movne	r3, #0
 8005c44:	eba6 0807 	sub.w	r8, r6, r7
 8005c48:	608b      	str	r3, [r1, #8]
 8005c4a:	f1b8 0f00 	cmp.w	r8, #0
 8005c4e:	dd9c      	ble.n	8005b8a <__sflush_r+0x1a>
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c54:	4643      	mov	r3, r8
 8005c56:	463a      	mov	r2, r7
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b0      	blx	r6
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	dc06      	bgt.n	8005c6e <__sflush_r+0xfe>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c66:	81a3      	strh	r3, [r4, #12]
 8005c68:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6c:	e78e      	b.n	8005b8c <__sflush_r+0x1c>
 8005c6e:	4407      	add	r7, r0
 8005c70:	eba8 0800 	sub.w	r8, r8, r0
 8005c74:	e7e9      	b.n	8005c4a <__sflush_r+0xda>
 8005c76:	bf00      	nop
 8005c78:	20400001 	.word	0x20400001

08005c7c <_fflush_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	690b      	ldr	r3, [r1, #16]
 8005c80:	4605      	mov	r5, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	b913      	cbnz	r3, 8005c8c <_fflush_r+0x10>
 8005c86:	2500      	movs	r5, #0
 8005c88:	4628      	mov	r0, r5
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	b118      	cbz	r0, 8005c96 <_fflush_r+0x1a>
 8005c8e:	6983      	ldr	r3, [r0, #24]
 8005c90:	b90b      	cbnz	r3, 8005c96 <_fflush_r+0x1a>
 8005c92:	f7ff f8f3 	bl	8004e7c <__sinit>
 8005c96:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <_fflush_r+0x6c>)
 8005c98:	429c      	cmp	r4, r3
 8005c9a:	d11b      	bne.n	8005cd4 <_fflush_r+0x58>
 8005c9c:	686c      	ldr	r4, [r5, #4]
 8005c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0ef      	beq.n	8005c86 <_fflush_r+0xa>
 8005ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ca8:	07d0      	lsls	r0, r2, #31
 8005caa:	d404      	bmi.n	8005cb6 <_fflush_r+0x3a>
 8005cac:	0599      	lsls	r1, r3, #22
 8005cae:	d402      	bmi.n	8005cb6 <_fflush_r+0x3a>
 8005cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb2:	f7ff f981 	bl	8004fb8 <__retarget_lock_acquire_recursive>
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	4621      	mov	r1, r4
 8005cba:	f7ff ff59 	bl	8005b70 <__sflush_r>
 8005cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cc0:	07da      	lsls	r2, r3, #31
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	d4e0      	bmi.n	8005c88 <_fflush_r+0xc>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	059b      	lsls	r3, r3, #22
 8005cca:	d4dd      	bmi.n	8005c88 <_fflush_r+0xc>
 8005ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cce:	f7ff f974 	bl	8004fba <__retarget_lock_release_recursive>
 8005cd2:	e7d9      	b.n	8005c88 <_fflush_r+0xc>
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <_fflush_r+0x70>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d101      	bne.n	8005cde <_fflush_r+0x62>
 8005cda:	68ac      	ldr	r4, [r5, #8]
 8005cdc:	e7df      	b.n	8005c9e <_fflush_r+0x22>
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <_fflush_r+0x74>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	bf08      	it	eq
 8005ce4:	68ec      	ldreq	r4, [r5, #12]
 8005ce6:	e7da      	b.n	8005c9e <_fflush_r+0x22>
 8005ce8:	08005ff4 	.word	0x08005ff4
 8005cec:	08006014 	.word	0x08006014
 8005cf0:	08005fd4 	.word	0x08005fd4

08005cf4 <_lseek_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	; (8005d14 <_lseek_r+0x20>)
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	602a      	str	r2, [r5, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7fb f8d0 	bl	8000ea8 <_lseek>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_lseek_r+0x1e>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_lseek_r+0x1e>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	200001ac 	.word	0x200001ac

08005d18 <__swhatbuf_r>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	460e      	mov	r6, r1
 8005d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	b096      	sub	sp, #88	; 0x58
 8005d24:	4614      	mov	r4, r2
 8005d26:	461d      	mov	r5, r3
 8005d28:	da07      	bge.n	8005d3a <__swhatbuf_r+0x22>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	89b3      	ldrh	r3, [r6, #12]
 8005d30:	061a      	lsls	r2, r3, #24
 8005d32:	d410      	bmi.n	8005d56 <__swhatbuf_r+0x3e>
 8005d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d38:	e00e      	b.n	8005d58 <__swhatbuf_r+0x40>
 8005d3a:	466a      	mov	r2, sp
 8005d3c:	f000 f8fe 	bl	8005f3c <_fstat_r>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dbf2      	blt.n	8005d2a <__swhatbuf_r+0x12>
 8005d44:	9a01      	ldr	r2, [sp, #4]
 8005d46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d4e:	425a      	negs	r2, r3
 8005d50:	415a      	adcs	r2, r3
 8005d52:	602a      	str	r2, [r5, #0]
 8005d54:	e7ee      	b.n	8005d34 <__swhatbuf_r+0x1c>
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	2000      	movs	r0, #0
 8005d5a:	6023      	str	r3, [r4, #0]
 8005d5c:	b016      	add	sp, #88	; 0x58
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}

08005d60 <__smakebuf_r>:
 8005d60:	898b      	ldrh	r3, [r1, #12]
 8005d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d64:	079d      	lsls	r5, r3, #30
 8005d66:	4606      	mov	r6, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	d507      	bpl.n	8005d7c <__smakebuf_r+0x1c>
 8005d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	2301      	movs	r3, #1
 8005d76:	6163      	str	r3, [r4, #20]
 8005d78:	b002      	add	sp, #8
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	ab01      	add	r3, sp, #4
 8005d7e:	466a      	mov	r2, sp
 8005d80:	f7ff ffca 	bl	8005d18 <__swhatbuf_r>
 8005d84:	9900      	ldr	r1, [sp, #0]
 8005d86:	4605      	mov	r5, r0
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f7ff f917 	bl	8004fbc <_malloc_r>
 8005d8e:	b948      	cbnz	r0, 8005da4 <__smakebuf_r+0x44>
 8005d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d94:	059a      	lsls	r2, r3, #22
 8005d96:	d4ef      	bmi.n	8005d78 <__smakebuf_r+0x18>
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	e7e3      	b.n	8005d6c <__smakebuf_r+0xc>
 8005da4:	4b0d      	ldr	r3, [pc, #52]	; (8005ddc <__smakebuf_r+0x7c>)
 8005da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db0:	81a3      	strh	r3, [r4, #12]
 8005db2:	9b00      	ldr	r3, [sp, #0]
 8005db4:	6163      	str	r3, [r4, #20]
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	6120      	str	r0, [r4, #16]
 8005dba:	b15b      	cbz	r3, 8005dd4 <__smakebuf_r+0x74>
 8005dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 f8cd 	bl	8005f60 <_isatty_r>
 8005dc6:	b128      	cbz	r0, 8005dd4 <__smakebuf_r+0x74>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	89a0      	ldrh	r0, [r4, #12]
 8005dd6:	4305      	orrs	r5, r0
 8005dd8:	81a5      	strh	r5, [r4, #12]
 8005dda:	e7cd      	b.n	8005d78 <__smakebuf_r+0x18>
 8005ddc:	08004e15 	.word	0x08004e15

08005de0 <memmove>:
 8005de0:	4288      	cmp	r0, r1
 8005de2:	b510      	push	{r4, lr}
 8005de4:	eb01 0402 	add.w	r4, r1, r2
 8005de8:	d902      	bls.n	8005df0 <memmove+0x10>
 8005dea:	4284      	cmp	r4, r0
 8005dec:	4623      	mov	r3, r4
 8005dee:	d807      	bhi.n	8005e00 <memmove+0x20>
 8005df0:	1e43      	subs	r3, r0, #1
 8005df2:	42a1      	cmp	r1, r4
 8005df4:	d008      	beq.n	8005e08 <memmove+0x28>
 8005df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dfe:	e7f8      	b.n	8005df2 <memmove+0x12>
 8005e00:	4402      	add	r2, r0
 8005e02:	4601      	mov	r1, r0
 8005e04:	428a      	cmp	r2, r1
 8005e06:	d100      	bne.n	8005e0a <memmove+0x2a>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e12:	e7f7      	b.n	8005e04 <memmove+0x24>

08005e14 <__malloc_lock>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__malloc_lock+0x8>)
 8005e16:	f7ff b8cf 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	200001a4 	.word	0x200001a4

08005e20 <__malloc_unlock>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__malloc_unlock+0x8>)
 8005e22:	f7ff b8ca 	b.w	8004fba <__retarget_lock_release_recursive>
 8005e26:	bf00      	nop
 8005e28:	200001a4 	.word	0x200001a4

08005e2c <_free_r>:
 8005e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d048      	beq.n	8005ec4 <_free_r+0x98>
 8005e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e36:	9001      	str	r0, [sp, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8005e3e:	bfb8      	it	lt
 8005e40:	18e4      	addlt	r4, r4, r3
 8005e42:	f7ff ffe7 	bl	8005e14 <__malloc_lock>
 8005e46:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <_free_r+0x9c>)
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	6813      	ldr	r3, [r2, #0]
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	b933      	cbnz	r3, 8005e5e <_free_r+0x32>
 8005e50:	6063      	str	r3, [r4, #4]
 8005e52:	6014      	str	r4, [r2, #0]
 8005e54:	b003      	add	sp, #12
 8005e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e5a:	f7ff bfe1 	b.w	8005e20 <__malloc_unlock>
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	d90b      	bls.n	8005e7a <_free_r+0x4e>
 8005e62:	6821      	ldr	r1, [r4, #0]
 8005e64:	1862      	adds	r2, r4, r1
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bf04      	itt	eq
 8005e6a:	681a      	ldreq	r2, [r3, #0]
 8005e6c:	685b      	ldreq	r3, [r3, #4]
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	bf04      	itt	eq
 8005e72:	1852      	addeq	r2, r2, r1
 8005e74:	6022      	streq	r2, [r4, #0]
 8005e76:	602c      	str	r4, [r5, #0]
 8005e78:	e7ec      	b.n	8005e54 <_free_r+0x28>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x58>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x4e>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1855      	adds	r5, r2, r1
 8005e88:	42a5      	cmp	r5, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x78>
 8005e8c:	6824      	ldr	r4, [r4, #0]
 8005e8e:	4421      	add	r1, r4
 8005e90:	1854      	adds	r4, r2, r1
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	d1dd      	bne.n	8005e54 <_free_r+0x28>
 8005e98:	681c      	ldr	r4, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	4421      	add	r1, r4
 8005ea0:	6011      	str	r1, [r2, #0]
 8005ea2:	e7d7      	b.n	8005e54 <_free_r+0x28>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x80>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	6003      	str	r3, [r0, #0]
 8005eaa:	e7d3      	b.n	8005e54 <_free_r+0x28>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	1961      	adds	r1, r4, r5
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf04      	itt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	6063      	str	r3, [r4, #4]
 8005eba:	bf04      	itt	eq
 8005ebc:	1949      	addeq	r1, r1, r5
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	6054      	str	r4, [r2, #4]
 8005ec2:	e7c7      	b.n	8005e54 <_free_r+0x28>
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bd30      	pop	{r4, r5, pc}
 8005ec8:	20000090 	.word	0x20000090

08005ecc <_realloc_r>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4607      	mov	r7, r0
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	460e      	mov	r6, r1
 8005ed4:	b921      	cbnz	r1, 8005ee0 <_realloc_r+0x14>
 8005ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005eda:	4611      	mov	r1, r2
 8005edc:	f7ff b86e 	b.w	8004fbc <_malloc_r>
 8005ee0:	b922      	cbnz	r2, 8005eec <_realloc_r+0x20>
 8005ee2:	f7ff ffa3 	bl	8005e2c <_free_r>
 8005ee6:	4625      	mov	r5, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eec:	f000 f848 	bl	8005f80 <_malloc_usable_size_r>
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d20f      	bcs.n	8005f14 <_realloc_r+0x48>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff f860 	bl	8004fbc <_malloc_r>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0f2      	beq.n	8005ee8 <_realloc_r+0x1c>
 8005f02:	4631      	mov	r1, r6
 8005f04:	4622      	mov	r2, r4
 8005f06:	f7fe ff13 	bl	8004d30 <memcpy>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ff8d 	bl	8005e2c <_free_r>
 8005f12:	e7e9      	b.n	8005ee8 <_realloc_r+0x1c>
 8005f14:	4635      	mov	r5, r6
 8005f16:	e7e7      	b.n	8005ee8 <_realloc_r+0x1c>

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4d07      	ldr	r5, [pc, #28]	; (8005f38 <_read_r+0x20>)
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	4608      	mov	r0, r1
 8005f20:	4611      	mov	r1, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fa ff5e 	bl	8000de8 <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	200001ac 	.word	0x200001ac

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fa ff92 	bl	8000e72 <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200001ac 	.word	0x200001ac

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fa ff91 	bl	8000e92 <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	200001ac 	.word	0x200001ac

08005f80 <_malloc_usable_size_r>:
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f18      	subs	r0, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfbc      	itt	lt
 8005f8a:	580b      	ldrlt	r3, [r1, r0]
 8005f8c:	18c0      	addlt	r0, r0, r3
 8005f8e:	4770      	bx	lr

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
